<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[乐园遗梦]]></title><description><![CDATA[碎碎念为主]]></description><link>http://blog.inori.icu</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 09 Nov 2019 13:53:56 GMT</lastBuildDate><item><title><![CDATA[对env的理解]]></title><description><![CDATA[env的目的 有些东西不适合进库。原因各种各样，有可能因为是secret，也有可能是经常change且这种change没有同步意义。
例： 某些sdk的认证信息、部署token等（secret info 一些构建状态的指示，比如debug标志、log level…]]></description><link>http://blog.inori.icu/2019-11-09/1/</link><guid isPermaLink="false">http://blog.inori.icu/2019-11-09/1/</guid><pubDate>Sat, 09 Nov 2019 13:17:25 GMT</pubDate><content:encoded>&lt;h3&gt;env的目的&lt;/h3&gt;
&lt;p&gt;有些东西不适合进库。原因各种各样，有可能因为是secret，也有可能是经常change且这种change没有同步意义。
例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;某些sdk的认证信息、部署token等（secret info&lt;/li&gt;
&lt;li&gt;一些构建状态的指示，比如debug标志、log level标志等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;dotenv的目的&lt;/h3&gt;
&lt;p&gt;因为每个项目都有类似的env的需求，但每切换一个项目都要清理一次系统的env状态就有点太麻烦且不安全了。
所以需要一种项目范围内env指定方式，用来合并、覆盖系统的env指定。&lt;/p&gt;
&lt;h3&gt;是否有数据类型的需求？&lt;/h3&gt;
&lt;p&gt;why not?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[jwt漫谈]]></title><description><![CDATA[session机制 原始的session 通过session，服务器与客户端得以在一段时间内同步状态，从而可以实现“流程”这个概念，以购物为例：通过session储存服务器可以知道客户端在添加了什么东西进购物车，知道发起结算的是哪位客户等等。一般情况下session…]]></description><link>http://blog.inori.icu/2019-06-23/</link><guid isPermaLink="false">http://blog.inori.icu/2019-06-23/</guid><pubDate>Sun, 06 Oct 2019 12:11:38 GMT</pubDate><content:encoded>&lt;h3&gt;session机制&lt;/h3&gt;
&lt;h4&gt;原始的session&lt;/h4&gt;
&lt;p&gt;通过session，服务器与客户端得以在一段时间内同步状态，从而可以实现“流程”这个概念，以购物为例：通过session储存服务器可以知道客户端在添加了什么东西进购物车，知道发起结算的是哪位客户等等。一般情况下session都与cookie配合使用，服务器给每个不带cookie（或未登录等业务特征）的访客发放一个sessionID存在cookie中。客户端则在请求中附带上cookie，让服务器知道现在是谁在进行操作，业务上的流程限制也可以据此实现。&lt;/p&gt;
&lt;h4&gt;session重建&lt;/h4&gt;
&lt;p&gt;顾名思义，session储存的生命周期就是一个session（会话），当会话（浏览器窗口，标签页）关闭之后，客户端与服务器断开连接，服务器在适当延迟后则判断这个session储存属于“垃圾数据”，应该清除掉防止缓存被挤爆。这时候问题来了：每次重新打开客户端都要重新登录以建立session实在不利于网站的转化率，如何在不挤爆缓存的情况下让客户端可以保留session状态？答案是化整为零，每个用户在cookie中都各自储存用来重建session的必要数据，比如登录凭证。&lt;/p&gt;
&lt;p&gt;当服务器发现cookie中指示的sessionID已不存在时就校验cookie中的带有的登录凭证，如果登录凭证有效就按照数据库中存下来的session相关数据重建session（以购物流程举例，购物车，待付款订单等）。当然，为保安全这些敏感信息都应经过可靠加密后才下放客户端，在条件允许下利用hash等手段进行一次有损转换则可以进一步防止用户信息外泄。&lt;/p&gt;
&lt;h4&gt;session的缺点&lt;/h4&gt;
&lt;p&gt;在万维网初期session机制工作得非常好，但是随着万维网应用逻辑的逐渐复杂，session机制的限制也逐渐暴露出来：session作为一个集中式储存的概念，所有接口的都必须读写同一块地方以便同步状态；同时为了业务扩展，每次对数据处理时也会尽可能多地把数据往session中丢。&lt;/p&gt;
&lt;p&gt;在上边短短的描述当中就可以看到session的两大缺点：第一，session成为无可争议的超级热点，每个API都有极大可能对它进行频繁读写。第二，session很难进行管理，相比起数据库，session不提供事务机制，不提供可视化阅览，没法在代码中体现整体结构，逻辑繁复后甚至可能出现某两个API使用了冲突的session-key命名，导致难以调试的bug。&lt;/p&gt;
&lt;p&gt;其他还有灾难恢复困难，阻碍灰度部署以及不下线部署，无法在不同框架、语言间共享等。&lt;/p&gt;
&lt;h3&gt;token机制&lt;/h3&gt;
&lt;h4&gt;原始的token&lt;/h4&gt;
&lt;p&gt;个人理解里这个级别的token并不是为了取代session而出现，更多是作为一种补充手段，两者的表达力不能同一而论。在一些只需要认证等少数不变信息的接口中，session这种会造成io热点的储存手段显得过于笨重。作为替代，把少量的信息按照顺序进行编码甚至加密后下放客户端。在相关请求中只需附带上token，服务端根据token解码结果便可实现逻辑，不需要争抢session的io资源。&lt;/p&gt;
&lt;h4&gt;原始token的缺点&lt;/h4&gt;
&lt;p&gt;没有统一、有效的数据结构编码表达方式，难以在token中表达类似session的结构性数据，同时token验证资源成为新的热点。&lt;/p&gt;
&lt;h4&gt;jwt(json web token)&lt;/h4&gt;
&lt;p&gt;jwt是针对普通token的一次改进，以json为基础提供了一种语言通用的结构表达规范，弥补了纯token对复杂结构的表达力不足；同时提供了数种经过证明安全的加密、签名及其组合方案，适当选择使用后可对token携带的内容提供密码学级别的保障，实现token自签名，接口分布验证，无需查询中心数据源。
在这个保障的基础上，出现了完全抛开session只使用jwt的可能性，这个手段有效避开了现代计算机中的io短板同时提供了足够的数据可信度，也更易于在多种语言、框架中进行状态共享。&lt;/p&gt;
&lt;h4&gt;jwt的缺点&lt;/h4&gt;
&lt;p&gt;拥抱jwt不依赖中心数据源的特性时，其可靠吊销手段只有自然过期及替换密钥，无法可靠提前注销指定部分token。&lt;/p&gt;
&lt;h3&gt;我的个人方案&lt;/h3&gt;
&lt;p&gt;假设每次jwt的验证都查询一次中心数据源，这样就等于退化为普通token验证了。&lt;/p&gt;
&lt;p&gt;秉承“能不做就不做，必须要做的就尽量延后做”的节能原则，我们不需要每次都校验jwt的有效，而是在token即将过期，需要重新签发时校验这个token是否能重新签发。在token仅因为过期而没有通过验证时，我们提取jwt中用户id并向中心数据源查询该用户是否符合重签策略，如符合，则覆写校验结果为真同时重新签发一个token。过期时间根据业务对有api封禁时差的容忍度（个人接触到的业务一般5分钟到15分钟的封禁误差都ok），确保token有效期减去重签倒计时小于指定的误差时间便可。&lt;/p&gt;
&lt;h3&gt;附&lt;/h3&gt;
&lt;p&gt;其实一开始的想法是分开两个token来签发，一个token是短效的（access token），他的生命周期就等于容忍误差；另一个是长效token（refresh token），生命周期取决业务需求，一周到一个月甚至季度都可以。每次请求下都发送两个token，当短效token因任何原因失效时，使用长效token作为重签校验。但在书写这篇blog时就有新的想法了，何苦使用两个token，只要在校验阶段拦截一下过期校验结果即可，虽然这在“机制”上就完全继承jwt而不是一个没有附加改动了（看起来稍稍low了一点）。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[怎么切割emoji😮]]></title><description><![CDATA[缘由 在写小程序的时候会发现有些后台提交的文章会导致小程序崩溃冻住，或者处理函数发生错误没法走下去。一开始没注意因为是真的小概率事件而且复现条件不明，直到有一天发生这个需求：我需要把文章一部分切割出来作为分享URL…]]></description><link>http://blog.inori.icu/2019-02-23/</link><guid isPermaLink="false">http://blog.inori.icu/2019-02-23/</guid><pubDate>Sat, 23 Feb 2019 06:42:58 GMT</pubDate><content:encoded>&lt;h3&gt;缘由&lt;/h3&gt;
&lt;p&gt;在写小程序的时候会发现有些后台提交的文章会导致小程序崩溃冻住，或者处理函数发生错误没法走下去。一开始没注意因为是真的小概率事件而且复现条件不明，直到有一天发生这个需求：我需要把文章一部分切割出来作为分享URL参数丢出来，这个问题可以稳定复现了：某一篇文章点击分享按钮没反应。经过一番debug后才发现是emoji切割产生的废弃字符导致下面这类代码出错了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;😮&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;掩盖&lt;/h3&gt;
&lt;p&gt;由于第一次碰到类似的问题，js也没找到什么原生的api可以用于安全切割emoji字符串，只能暂时跟运营商量先把emoji往后移动，只要我需要切割的部分不包含就完事大吉了。经过两个汉堡的艰难谈判之后我取得了一个版本的宽容期。&lt;/p&gt;
&lt;h3&gt;社区方案&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/emoji-aware&quot;&gt;emoji-aware&lt;/a&gt;是第一个我能找到的支持emoji切割的方案，它不仅支持普通emoji还支持了高位复合emoji(如：’👨‍👩‍👧‍👦’)，查看源码之后发现是一个先转成array对array进行切割后再复合的&lt;a href=&quot;https://github.com/beaugunderson/emoji-aware/blob/master/emoji-aware.js#L5&quot;&gt;思路&lt;/a&gt;，为了支持高位emoji还特意写了一个parse。正觉得还行的时候发现该库的第一行有一条Note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Lodash’s &lt;code class=&quot;language-text&quot;&gt;toArray&lt;/code&gt; (as of 4.0.0) and &lt;code class=&quot;language-text&quot;&gt;split&lt;/code&gt; (as of 4.9.0) functions
now correctly split strings that contain emoji; so if that’s all you need to do
then &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; is a great fit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯嗯，是你了。&lt;/p&gt;
&lt;h3&gt;最后：Lodash&lt;/h3&gt;
&lt;p&gt;绕了一圈发现绝大部分的emoji字符串切割都是使用同一个思路，先把字符串展开成数组，对数组进行切割后复合为字符串来代替直接对字符串进行操作。这个操作思路的最大好处是可以自定义一个展开数组的逻辑来支持定制需求（在这里就是对高位unicode字符的正确支持），剩下的事情就是常规操作，可以坐下慢慢秀。&lt;/p&gt;
&lt;p&gt;下边就是从Lodash里边抽出来的关于toArray的代码, 由于Lodash里边的toArray还包含了很多其他类型对象的支持但是这些对于我来说其实并没用所以这里就做了精简，结合切割需求直接把最后的需求一起实现(copy-parse)了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码转最后附录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;求助？&lt;/h3&gt;
&lt;p&gt;其实在最早的时候上网查说阮一峰老师有一篇博文提到了如何切割emoji以及检测是否有被剪切坏的emoji，但是实在没找到这篇文章？&lt;/p&gt;
&lt;p&gt;另最后贴的一个链接里边是关于diss阮一峰老师的。。。。&lt;/p&gt;
&lt;p&gt;emm，总体来说我还是很尊敬这位互联网老兵的贴出来只不过是刚好里边涉及到了关于这次的主题 编码 的。&lt;/p&gt;
&lt;h3&gt;推荐阅读&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mathiasbynens.be/notes/javascript-unicode&quot;&gt;JavaScript has a Unicode problem · Mathias Bynens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/04/emoji.html&quot;&gt;Emoji 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.v2ex.com/t/343634?p=1&quot;&gt;阮一峰的文章有哪些常见性错误&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;附录&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//@ts-check&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/** come from https://github.com/lodash/lodash/blob/4.17.11/lodash.js#L755 */&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** Used to compose unicode character classes. */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rsAstralRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\ud800-\\udfff&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsComboMarksRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\u0300-\\u036f&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    reComboHalfMarksRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\ufe20-\\ufe2f&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsComboSymbolsRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\u20d0-\\u20ff&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsComboRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rsComboMarksRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; reComboHalfMarksRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsComboSymbolsRange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsVarRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\ufe0e\\ufe0f&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** Used to compose unicode capture groups. */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rsAstral &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsAstralRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsCombo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsComboRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsFitz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\ud83c[\\udffb-\\udfff]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsModifier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(?:&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsCombo &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;|&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsFitz &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsNonAstral &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[^&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsAstralRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsRegional &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(?:\\ud83c[\\udde6-\\uddff]){2}&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsSurrPair &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[\\ud800-\\udbff][\\udc00-\\udfff]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsZWJ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\\u200d&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** Used to compose unicode regexes. */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reOptMod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rsModifier &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsOptVar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsVarRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;]?&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsOptJoin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(?:&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsZWJ &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(?:&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rsNonAstral&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rsRegional&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rsSurrPair&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;|&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsOptVar &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; reOptMod &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)*&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsSeq &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rsOptVar &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; reOptMod &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsOptJoin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    rsSymbol &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(?:&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rsNonAstral &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsCombo &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rsCombo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rsRegional&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rsSurrPair&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rsAstral&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;|&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reUnicode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rsFitz &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(?=&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsFitz &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)|&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsSymbol &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsSeq&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reHasUnicode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsZWJ &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsAstralRange  &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsComboRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rsVarRange &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unicodeToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reUnicode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasUnicode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; reHasUnicode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asciiToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;stringToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasUnicode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unicodeToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asciiToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; toArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stringToArray
&lt;span class=&quot;token comment&quot;&gt;/**
 * 安全的字符串切割
 *
 * @private
 * @param {string} str 待切割的字符串
 * @param {number} start 切割起始位置
 * @param {number} len 切割长度
 * @returns {string} 返回切割好的字符串
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;safeSubstring&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @example
 * var test = safeSubstring(&apos;我爱大家👨‍👩‍👧‍👦哦~&apos;, 0 , 5)
 * console.clear()
 * console.log([
 *  test,
 *  encodeURI(test),
 *  decodeURI(encodeURI(test)),
 * ])
 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[2019年写的2018年终总结]]></title><description><![CDATA[年头 emmm……年头还是在我人生中的第二个任职公司当咸鱼。新年那段时间的话应该还算是在一个贷款项目了，还在无尽的bug修复阶段，老板提bug…]]></description><link>http://blog.inori.icu/2019-01-02/</link><guid isPermaLink="false">http://blog.inori.icu/2019-01-02/</guid><pubDate>Wed, 02 Jan 2019 14:44:21 GMT</pubDate><content:encoded>&lt;h1&gt;年头&lt;/h1&gt;
&lt;p&gt;emmm……年头还是在我人生中的第二个任职公司当咸鱼。新年那段时间的话应该还算是在一个贷款项目了，还在无尽的bug修复阶段，老板提bug（需求），我负责实现。回头看了一下，自己写的东西确实有点不堪入目，主要都是体现在系统设计能力不足上边：一个联动搜索被我做成那个鬼样……也是挺不容易：一直用jq做页面切换侦听，结果就跌进去死循环了，最后只能完全锁死返回操作，然后返回操作的回填也难受。换成现在的我的话，估计会考虑绕开返回上一页这么一个傻逼操作了：ios的侧滑返回在微信实在是无法解决，各种奇奇怪怪的方法搞来搞去不如调整一下ui做成卡片式，在卡片上滑动就返回上一个表单填写。在最后做一次合并提交。&lt;/p&gt;
&lt;p&gt;另一个当时觉得贼恶心的事情就是提交的问题，因为需要做搜索结果复现，所以搜索条件是肯定要存下来的了，关键是怎么存- -搜索条件分成两类，一个是关键词，一个是筛选条件，筛选条件用 问题答案id键值对 做储存就没问题了，二次筛选事件产生时就按照键去搜索修改。&lt;/p&gt;
&lt;h1&gt;劳动节前后？&lt;/h1&gt;
&lt;p&gt;经历了两个比较难忘的事情……一个是要做面试，第一次在面试官角度来思考招聘究竟是个啥东西。结果来说还是招聘这东西除非是大公司几段式有流程那种，不然都比较类似聊开心能然面试官觉得你能写代码就ok了。因为自己的要求就是那样……一次面试真的难确定招进来是不是真牛逼，都是靠看之前的经验做了啥，如果是没经验那就更难看出来了，只能看是不是连基础都不懂的**。&lt;/p&gt;
&lt;p&gt;另一个就是同事离职。在我没留意的地方同事已经提前下了决心做好准备走。&lt;/p&gt;
&lt;h1&gt;迎接新同事之后&lt;/h1&gt;
&lt;p&gt;其实这段也是属于前一段了：试着用webpack写了一套属于自己的多页开发环境。多页面生成，poyfill，minify，postcss，babel一应俱全，想了下之前自己傻乎乎一个个页面复制babel里边再粘贴真是傻- -配合着这个经验也顺利把公司项目的新改动内容搬到bebel里边了。&lt;/p&gt;
&lt;p&gt;整个配置感觉最难的不是写config上边，倒是整个项目结构的考虑。一开始是打算所有东西都在src里边做，但是html是在独立的templ目录不好跨目录读取内容，放templ同理，思来想去还是觉得整个项目包进去，虽然在项目的根目录可能会有多了几个配置问题但是至少是可用的；然后是src跟dist的选取上，本来是想着混杂在同一个目录下边，最后推翻了这个想法：监听过滤太难受了，如果是&lt;code class=&quot;language-text&quot;&gt;src/dist&lt;/code&gt;这种类型由稍显累赘，最后决定了dist走过去，src与dist同级，templ文件夹那边同理，顺便用来做转换进度指标。&lt;/p&gt;
&lt;h1&gt;接手做一个全新的项目&lt;/h1&gt;
&lt;p&gt;公司给了一个全新的项目要求做PC端商城，回头看意想不到的地方是此时我依然不敢上react的车- -当然，对后端的不信任也有一丝考虑在内但主要还是自己不敢动的问题。要是直接用react的话估计没有后边那么多问题了吧- -被傻逼后端改代码改成页面崩坏的状况。完全不可能发生了。&lt;/p&gt;
&lt;p&gt;没记错的话我对react的恐惧应该起于我还不怎么了解其操作dom的能力，可能连ref都不了解？（不过如果这个时候还不理解的话什么时候学到的……）然后看了一下老板丢过来的目标网站感觉好多东西还是要dom比较稳（这个也是菜鸡想法了）。&lt;/p&gt;
&lt;p&gt;整体回忆起来项目dom依靠比较重的应该是两个，一个是放大镜效果一个tab切换过渡效果。放大镜不用怎么说了，didMount监听一下ref的mouseOver，判断target然后对头的话直接取offsetX/Y就完事了……至于Tab过渡效果，触发class变动直接写过渡。&lt;/p&gt;
&lt;h1&gt;emmmmm…然后就是等辞职？&lt;/h1&gt;
&lt;p&gt;中间公司也出了几个奇怪的政策，比如“军令状”这个东西。因为公司的交付周期并没有老板想象中的快（其实也当然，什么需求都不拒绝。。。），所以老板就一直在考虑怎么提一下这个速度了，最后的出招是自己定时间我们自己凑进度。嘛，虽然一开始觉得很苦但是回头一看好像也就那样（毕竟现在是996的作息233），而且确实进度限制一下的队友也能好好的跟一下进度而不是一脸懵逼等指示。但说实话，那种资本家的嘴脸还是觉得适应不了，我喜欢企业家多过资本家。有人会质疑：“你只是不喜欢有人在给你加限制吧”不可否认肯定会有一丝这个意思在内，但是在我的认知里边，企业家更会注重一个东西：思考。书籍是人类进步的阶梯？放屁，思考才是。资本家和企业家在我的认知里边最大的不同其实在于用什么角度来督促我，或者说激励我：我更喜欢用一个有根基的蓝图来激励我，而不是xx天之后我们就可以上市，你们将成为我司元老云云。&lt;/p&gt;
&lt;p&gt;当然这件事情也提醒了我，人都是相同的：我喜欢一个有思考习惯的老板，老板（emm，面试官也算老板好了）也会喜欢有思考的人，不管这个思考是幼稚还是雄伟，有思考的人才不会腐烂。这也是激励我好好写下这个博客的思想动力之一（也有一些动力是好久甚至说好小时就存在的，比如交一些臭味相投的朋友，联系一下语文水平等等哈哈哈哈哈哈&lt;/p&gt;
&lt;h1&gt;找工作&lt;/h1&gt;
&lt;p&gt;有两个比较可惜的面试，一个是腾讯外包的，一个是华为的。腾讯外包的那个岗位说实话我是真的想进（现在也如此），面试官回忆起来也是那种会好好交谈的人，一开始其实觉得自己谈得挺好的，但后来就觉得有点不行了，最明显的转折点（自认）应该是问我学习手段吧。平常确实会看一些邮箱订阅或者关注的大神的博客作为认知开拓手段但是说实话过去那一年回家之后比较倾向于娱乐以至于一下都觉得自己一直在玩了……老子也是在好好努力的呀（哭）。然后之前回答问题时累积的一些缺点也慢慢放大导致面试官很怀疑个人的学习能力然后也放弃了我。不过最后那句评语：“出来一年的前端不应该这么菜”这句话到现在都还是有点怀疑- -至少现在遇到的跟我同级别的队友都没写出过什么能然我惊叹的代码，互相请教也是常规。&lt;/p&gt;
&lt;p&gt;下一个想说一下就是华为的面试，华为的面试其实是有两次，两次的技术面试其实都还行，至少问的都答出来，小答卷也做出来（印象比较深是要我写一个dom ast 解析，不过说起来也就是递归一下解析child节点），应该没什么特别可挑剔的。但问题就死在最后一轮上，第一个是问我对于加班的看法，老子一直安稳在96一下子跟我说有可能99，第一反应当然是呆住了：99简直反人类呀！好的，毙了。第二个面试跟我谈了半天最后托面试联系人跟我讲“稳定性不行”，沟通一下之后应该是在讲述过去项目的时候说得比较水。最有疑点的问题应该是“过去你最自豪或者最想谈一下的项目有哪些”，我个人的回答也很实诚，因为项目都写得不怎么如意所以想说的没什么，最想说的反而是自己把webpack配置写出来了用起来了。没把webpack推广开来这件事情给重点提一下真是失策，把整个开发流程给定下来这件事情确实是我最自豪的一件事情，找jq插件找bootstrap插件凑项目赶工期有什么好自豪哦……&lt;/p&gt;
&lt;h1&gt;新工作&lt;/h1&gt;
&lt;p&gt;通过各种手段好歹在近年末期间把工作定下来了，就是现在的公司。一开始的工作时间确实还真的有点不习惯就是了，慢慢的话也就麻痹了。反正本来的计划也是回家之后自己学习，灵活安排一下时间的话其实在公司还是在家都一样了。&lt;/p&gt;
&lt;p&gt;然后新公司让我最感动的一点就是完全是跟上时代了：react技术栈，gitlab管理代码，postman管理接口。光听的话完全就是我想要理想状态，但进到实际的话还是要考虑人的因素，前人总结得好：技术并不能阻止傻逼。就算是再好的技术，也需要适当的制度来管理，比如锁master（master只能通过merge来更新），比如自动化测试等，这些都是慢慢接触之后才认知到的点。&lt;/p&gt;
&lt;h1&gt;新工作 新项目&lt;/h1&gt;
&lt;p&gt;在新公司第一个单独负责的项目是一个小程序。说起来讽刺，一年前的我还觉得小程序就是个话题物，现在却要依靠它养活自己了233.回头总结一下的话，就只有一句话：rxjs选的真是没错……redux那套哲学在小程序根本走不通，巨无霸state库的更新会死人的。通过rxjs做全局服务，把store收窄到global变量里边，适当放出有用的数据到组件中间去是一个适当的想法。&lt;/p&gt;
&lt;p&gt;现在剩下的遗憾应该是轻信了产品说的大部分api都是在登陆状态下的这个鬼话……一开始没好好区分出来登录态跟用户信息的区别，我其实只要保证登录成功就可以走下去，用户信息在用的时候再检测就行了。反正接下来会有一个改版更新，重点修正应该就是登录态的维护了，独立出来一个uid服务以及用户信息服务应该是比较好的，在这个基础上登录判断也好做了。&lt;/p&gt;
&lt;h1&gt;新一年&lt;/h1&gt;
&lt;p&gt;最大的愿望应该还是想要好队友了。&lt;/p&gt;
&lt;p&gt;迟到的总结，以及祝福。&lt;/p&gt;
&lt;p&gt;2019年1月4日23点56分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[关于imm*类数据不可变库的一些想法]]></title><description><![CDATA[缘由 今天老大喊我把之前rn写的App优化一下……不同tab之间的的切换太卡了，给了一个思路是上一个，我这边的意思是让我先看一下代码，毕竟我还没写过rn…… 为何会有imm* immutable-js…]]></description><link>http://blog.inori.icu/2018-12-28/</link><guid isPermaLink="false">http://blog.inori.icu/2018-12-28/</guid><pubDate>Fri, 28 Dec 2018 14:09:08 GMT</pubDate><content:encoded>&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;今天老大喊我把之前rn写的App优化一下……不同tab之间的的切换太卡了，给了一个思路是上一个&lt;code class=&quot;language-text&quot;&gt;immutable-js&lt;/code&gt;，我这边的意思是让我先看一下代码，毕竟我还没写过rn……&lt;/p&gt;
&lt;h1&gt;为何会有imm*&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/immutable-js&quot;&gt;immutable-js&lt;/a&gt;，通过导出自定义数据结构构造器，构造得到的对象仅有的各个方法均为返回新对象的方法，不提供任何手段来直接修改对象内容。当然，为了避免&lt;code class=&quot;language-text&quot;&gt;JSON.parse(JSON.stringify))&lt;/code&gt;等deepClone手段的低效，&lt;code class=&quot;language-text&quot;&gt;immutable-js&lt;/code&gt;通过使用特定的数据结构来储存、修改、衍生常用结构，达到用最小消耗来隔离两个数据对象的目的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mweststrate/immer&quot;&gt;immer&lt;/a&gt;，与前者不同的是，immer并没有使用各种奇怪的奇怪的数据结构来优化数据对象的隔离消耗，而是使用高阶函数包裹修改操作，把传入对象包裹一层添加&lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt;|&lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;来隔离修改操作对传入对象的影响，同时循环将原对象以及记录到的修改操作循环assign到&lt;a href=&quot;https://github.com/mweststrate/immer/blob/master/src/common.js#L39&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt;&lt;/a&gt;上作为return值返回。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vue的老铁肯定觉得很熟悉（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;介绍完最主流的两个不可变数据实现库后再回头看看当初fb员工提出&lt;code class=&quot;language-text&quot;&gt;immutable-js&lt;/code&gt;时提到的&lt;strong&gt;why&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不可变数据带来两个最大的优势，
第一个就是数据都是不可变后，修改操作不再会产生潜在的影响，修改操作进行时的心智负担变小了；
第二个就是避免了&lt;code class=&quot;language-text&quot;&gt;shadowDiff&lt;/code&gt;, 有效解决了&lt;code class=&quot;language-text&quot;&gt;PureComponent&lt;/code&gt;的问题，为降低&lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt;消耗提供了一条思路。（当然原介绍中用的不是&lt;code class=&quot;language-text&quot;&gt;PureComponent&lt;/code&gt;，当时还是ES5函数的时代，用的是&lt;code class=&quot;language-text&quot;&gt;mixin&lt;/code&gt;。&lt;code class=&quot;language-text&quot;&gt;mixin&lt;/code&gt;是直到ES6 Class声明写法流行后才被抛弃同时定性为有害，想想也是惨233&lt;/p&gt;
&lt;h1&gt;redux&lt;/h1&gt;
&lt;p&gt;要说&lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt;肯定会联想到&lt;code class=&quot;language-text&quot;&gt;react-redux&lt;/code&gt;，他提供的高阶组件&lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt;其中一个作用就是修改了组件的&lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt;强制为浅对比，也就是所有组件都变成了&lt;code class=&quot;language-text&quot;&gt;PureComponent&lt;/code&gt;。同时也是基于这个原因，redux的各大教程最大的一条注意事项就是：修改state时需要返回一个全新对象，要&lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt;判断为假的那种全新，反则修改后有可能不会触发刷新。&lt;/p&gt;
&lt;h1&gt;redux + imm* ?&lt;/h1&gt;
&lt;p&gt;那么进入redux时代后，imm*类库的存在意义有何变化？回看前文提到的不可变数据结构，两大优势其中之一已经被redux无意间消去，只剩下减少心智负担这一条。但是认真一想：state修改极少会遇到引用类型数据，就算有，也是不会复用的那种、仅限自己层叠的数据结构，极少遇到不同state-key之间共享同一块数据的情况(或者根本没有？反正我没写过这么奇葩的state结构)。那么这个时候的心智负担会有多大？就算是以贴合原生API为卖点的&lt;code class=&quot;language-text&quot;&gt;immer&lt;/code&gt;也是以降低层叠结构修改繁复作为主要宣传场景，而当下大家也找到另一种绕开层叠数据的手段：不层叠就完事了。每一个model里边的数据都尽量做到完全扁平，这样借助es6解构语法返回新对象并不会比点操作符修改繁杂多少，甚至熟悉之后会觉得更加简单明了。&lt;/p&gt;
&lt;h1&gt;imm*类库可以降低性能消耗？&lt;/h1&gt;
&lt;p&gt;都是返回新对象……&lt;/p&gt;
&lt;p&gt;有人会反驳说&lt;code class=&quot;language-text&quot;&gt;immutable-js&lt;/code&gt;会复用数据结构……我只想说怎么复用也是要把修改的存上去，用完就丢的场景这个复用实在……&lt;/p&gt;
&lt;h1&gt;最后&lt;/h1&gt;
&lt;p&gt;一组代码作为体验pure与否的差距。令我比较惊讶的是函数组件……我原本以为函数组件是打死不刷新的，看来应该是只要触发了props变动就一定会rerend。&lt;/p&gt;
&lt;p&gt;代码使用tsx书写，因为染色问题个别地方写得比较别扭……&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;type Props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; deep&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Record&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;num&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; number&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
type State &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; deep&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Record&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;num&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; number&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pure&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; boolean&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; textFunc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; State&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;text&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;string&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deep&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; value&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FuncComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;textFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FuncComponent&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

type NormalComponentProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Props &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pure&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; boolean&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NormalComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NormalComponentProps&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shouldComponentUpdate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextProps&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; NormalComponentProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;nextProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pure &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; nextProps
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;textFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;NormalComponent&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PureComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PureComponent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Props&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;textFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;PureComponent&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; State&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  readonly state&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; State &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      deep&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        num&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    pure&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;clickHandle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; deep &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; num &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; deep
    value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      num&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;pureToggleHandle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pure &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      pure&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;pure&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pure &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;textFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;state is&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clickHandle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;plus &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pureToggleHandle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;pure&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;hr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FuncComponent value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;hr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NormalComponent value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; pure&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pure&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;hr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;PureComponent value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;晚安，&amp;#x26; 提前祝 新年好
2018年12月29日00点54分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[一些想补的基础：new机制，原型]]></title><description><![CDATA[原型 其实阮一峰在他自己的(博客)http://www.ruanyifeng.com/blog/2011/06/designingideasofinheritancemechanisminjavascript.html…]]></description><link>http://blog.inori.icu/2018-12-17-2/</link><guid isPermaLink="false">http://blog.inori.icu/2018-12-17-2/</guid><pubDate>Mon, 17 Dec 2018 08:45:57 GMT</pubDate><content:encoded>&lt;h1&gt;原型&lt;/h1&gt;
&lt;p&gt;其实阮一峰在他自己的(博客)[http://www.ruanyifeng.com/blog/2011/06/designing&lt;em&gt;ideas&lt;/em&gt;of&lt;em&gt;inheritance&lt;/em&gt;mechanism&lt;em&gt;in&lt;/em&gt;javascript.html]里边说的挺好的了,当初看这个文章就觉得有点牛皮但是也就那样，没有进一步去多想。最近想了解这方面的东西的时候又一下子没想起来自己绕了挺大的圈子。&lt;/p&gt;
&lt;p&gt;js在设计之初以简单为原则，所以拒绝引入完整的oop套路，简化成为new操作直接调用 constructor 而不是像传统的oop一样是调用整个class定义。这带来的一个问题就是：在oop思想里边，我们除了要定义对象本身的、不共享的东西，还要定义对象共享的东西，直接把new操作等同执行constructor函数造成的问题就是无法无法继承了，每个new操作都只是一个函数的返回值而已，为了实现继承机制，js添加了原型链的机制。&lt;/p&gt;
&lt;p&gt;每个对象都有各自的原型，原型也会有自己的原型，直到最后的原型：&lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;。对对象进行取值时，会按着原型链一层一层往上查找自身没有的属性（方法）。为了记录自己的原型，每个对象都会有一个内置属性&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;记录下自身的原型，常见的原型获取手段&lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt;读写的也是这个内置属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附带说一句虽然这个属性虽然很广泛但严格意义上并不是标准属性，读写这个内置属性的标准做法应该是使用ES6(ES5.1 ?)中&lt;code class=&quot;language-text&quot;&gt;Object.getPrototypeOf&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;Object.setPrototypeOf&lt;/code&gt;方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原型链这个概念比较麻烦的是new操作中指定原型：对&lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;进行new操作得到的对象的&lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt;属性是&lt;code class=&quot;language-text&quot;&gt;constructor.prototype&lt;/code&gt;。这里冒出来的&lt;code class=&quot;language-text&quot;&gt;prototype&lt;/code&gt;是？&lt;/p&gt;
&lt;h1&gt;prototype&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;prototype&lt;/code&gt;是js里内置constructor的一个属性，内容均为特殊的&lt;code class=&quot;language-text&quot;&gt;ƒ () { [native code] }&lt;/code&gt;（js引擎原生内容），而对这类内置constructor直接进行new操作得到的对象也同样会有这么一个属性，方便进行继承构造。&lt;/p&gt;
&lt;h1&gt;手动new&lt;/h1&gt;
&lt;p&gt;正确理解上边的内容后自己实现new操作已经扫清一大半障碍了，剩下的事情其实就是随意读一下规范看规范有没有别的坑没摸到的程度了。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cunstomNew&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;/Function/i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;constructor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;constructor must be a function&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; that &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;that&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  that&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
  that&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; constructor

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; that
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cunstomNew&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;午安
2018年12月17日18点06分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[create-react-app@2 withTS 编译速度跟dll的关系]]></title><description><![CDATA[tl;dr 没关系。 至少在简单项目里边没啥区别。 添加DLL的曲折 1. DLL的使用方式 之前因为一直都没接触DLL（仅仅是知道有DLL这个东西），整体处于“道理我都懂，爱上你自己上，反正我不上”的状态。这次 cra(create-react-app…]]></description><link>http://blog.inori.icu/2018-12-17/</link><guid isPermaLink="false">http://blog.inori.icu/2018-12-17/</guid><pubDate>Sun, 16 Dec 2018 21:01:22 GMT</pubDate><content:encoded>&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;p&gt;没关系。&lt;/p&gt;
&lt;p&gt;至少在简单项目里边没啥区别。&lt;/p&gt;
&lt;h1&gt;添加DLL的曲折&lt;/h1&gt;
&lt;h3&gt;1. DLL的使用方式&lt;/h3&gt;
&lt;p&gt;之前因为一直都没接触DLL（仅仅是知道有DLL这个东西），整体处于“道理我都懂，爱上你自己上，反正我不上”的状态。这次 cra(create-react-app 简写，下同) 的编译实在太长时间了就想着当作补全盲点试着配置了，结果看文档看了半天才理解过来为啥要分开两个配置- -&lt;/p&gt;
&lt;p&gt;简单来说DLL就是把一部分依赖抽出来提前编译了一次，同时让编译结果可复用。那么提前编译怎么来？就是多写一个配置……多出来的配置写DLL生成，然后同时在原生的配置加一个引用指示，收工完事。&lt;/p&gt;
&lt;p&gt;不过这里又引出一个问题……为啥umi只需要一次编译操作就可以初始化DLL了？问得好。因为整个webpack脚本是动态生成的……也就是他其实是生成了两段脚本，只不过这个过程用户无感而已。简单来说就是在未公开的hook - _beforeDevServerAsync 添加一个build脚本的&lt;a href=&quot;https://github.com/umijs/umi/blob/master/packages/umi-plugin-dll/src/index.js#L13&quot;&gt;Promise&lt;/a&gt;, 这样在第一次启动（刷新）开发服务器前会检测一次DLL目录并把DLL的JSON解析出来依赖项的数组并与配置文件比对，没差就过，有差别就刷新DLL。&lt;/p&gt;
&lt;h3&gt;2. 为啥没用？&lt;/h3&gt;
&lt;p&gt;因为就是没用……&lt;/p&gt;
&lt;p&gt;当然如果要说代码层面的话，cra在ts状态下问题不在于dll之流的问题，babel的缓存也起了一定作用（个人理解冲掉了大部分DLL的功效，毕竟直接读缓存根本没走编译），而在于TS的语法检测插件上，去掉之后秒刷一点不假……&lt;/p&gt;
&lt;h3&gt;3. 遗憾&lt;/h3&gt;
&lt;p&gt;两个遗憾，一个是基本上是靠猜找出来的瓶颈，没有找到手段量化整个编译阶段。工具应该是有的（印象中看到过菊苣发文用过），但是没记起来名字。另一个则是没有debug到为什么DLL生成插件和引用插件需要传不同context，能追踪到是跟启动脚本有关但是没找到原因所在。cra简直黑科技集合体……&lt;/p&gt;
&lt;h3&gt;4. 关于umi&lt;/h3&gt;
&lt;p&gt;有点厉害但是个人来说不太想用……绑得太死了，连webpack都得拉分支出来了，作为集团选择应该很不错因为屏蔽了很多细节，不给太多犯错的机会，也给予足够的开发支持。但我不喜欢的也在这个地方，封装好深好深，屏蔽了太多细节，有种双脚离地的感觉。特别是脱离webpack的做法很让我担心：万一各种缘由下不得不停止项目支持，那么迁移到原生webpack的难度如何？cra好歹能eject把实现丢出来，有个万一都能改得动。&lt;/p&gt;
&lt;p&gt;晚安（早安？）
2018年12月17日05点26分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[工作小结]]></title><description><![CDATA[辣鸡基友放我飞机不带我飞，那就顺便把之前欠下的目标给补一下好了。（好难得连续更新的居然是因为基友放飞机，看来我真的有点堕落 行文 这次主要会以QA的方式来记录这个月来小程序开发的一些心得了, 以taro为基础。 Q: 小程序登陆怎么做？ hint: wx.login是重点 A…]]></description><link>http://blog.inori.icu/2018-12-10/</link><guid isPermaLink="false">http://blog.inori.icu/2018-12-10/</guid><pubDate>Mon, 10 Dec 2018 14:29:03 GMT</pubDate><content:encoded>&lt;p&gt;辣鸡基友放我飞机不带我飞，那就顺便把之前欠下的目标给补一下好了。（好难得连续更新的居然是因为基友放飞机，看来我真的有点堕落&lt;/p&gt;
&lt;h3&gt;行文&lt;/h3&gt;
&lt;p&gt;这次主要会以QA的方式来记录这个月来小程序开发的一些心得了, 以&lt;a href=&quot;https://github.com/NervJS/taro&quot;&gt;taro&lt;/a&gt;为基础。&lt;/p&gt;
&lt;h4&gt;Q: 小程序登陆怎么做？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;hint: wx.login是重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A: 小程序的登陆说简单也不简单，说难受也不难受，全在于你对微信的整套体系熟悉以及接受得了不。这边在实际项目中整体登陆逻辑往简单方向靠没有做太多花样，sso做授权管理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查本地是否有sso，没有就进行2，有则跳到4&lt;/li&gt;
&lt;li&gt;wx.login函数调用获得一个token性质的东西丢给后端，后端经过一顿捣鼓封装好请求后丢给腾讯服务器，腾讯返回用户信息。这个时候服务器已经可以拿到用户的openid做个体识别创建用户条目了，当然如果你认证够格还能拿到uniid。&lt;/li&gt;
&lt;li&gt;在步骤2中丢token给后端后等待后端返回用户基本信息以及自家的sso。&lt;/li&gt;
&lt;li&gt;依据业务需求检查（缓存或者步骤3返回的响应）是否需要用户的个人信息，用户信息包括两方面：一是头像昵称性别这类opendate性质的信息，另一是手机号码。这两类信息获取流程一般是检查后端缺什么，举栗如果缺昵称，那么先检查有没有获取用户opendate的权限（这个在删除小程序后会重置授权），有则可以直接调用api获取不需要用户交互；没有获取权限则需要显示弹层或者跳转授权页等方式展示一个&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/component/button.html&quot;&gt;button&lt;/a&gt;给用户，提示用户进行授权。当然，如果什么都不缺，那就不用处理任何东西。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Q: 小程序瀑布流怎么做&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;hint: flex-box&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A: 瀑布流网上有好多种实现方式，甚至有算着高度然后绝对定位的……看着就冒冷汗。这边直接使用flex-box实现，一行&lt;code class=&quot;language-text&quot;&gt;display: flex;&lt;/code&gt;丢给瀑布流总容器，然后你想要多少条瀑布流就建立多少个瀑布流“流容器”，各个流容器之间的排布是不会互相影响的，就这么简单。&lt;/p&gt;
&lt;p&gt;什么？还不懂？&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; images &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;xx.jpg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;xx.jpg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;xx.jpg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;xx.jpg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; display&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;flex&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; justifyContent&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;space-between&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; flexBasis&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;48.8%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        images&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;val&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; flexBasis&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;48.8%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        images&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;val&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Q: 小程序吸底输入栏怎么做&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;hint: 小程序&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;组件的&lt;code class=&quot;language-text&quot;&gt;cursor-spacing&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;adjust-position&lt;/code&gt;以及&lt;code class=&quot;language-text&quot;&gt;bindfocus&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A: 小程序里边的做fixed定位底部的input在默认情况下其实就已经不会有阻挡的问题，实在有需求的话就设置一下&lt;code class=&quot;language-text&quot;&gt;cursor-spacing&lt;/code&gt;控制input与键盘的距离。这里抛出这个问题主要是指有些产品会要求“页面不上推同时input做吸底效果”。这个时候需要把&lt;code class=&quot;language-text&quot;&gt;adjust-position&lt;/code&gt;设假值并在&lt;code class=&quot;language-text&quot;&gt;bindfocus&lt;/code&gt;中获取键盘高度设置到style中。一开始我也是以为做resize监听啥的……白绕一圈后跟着偷懒去抽烟的同事吹吹风后回来就看到这个api了。事实再次证明偷懒是第一生产力（我不抽烟，所以抽烟在这里不算生产力）。&lt;/p&gt;
&lt;h4&gt;Q: 小程序弹窗组件怎么做&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;hint: taro提供的&lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt;做方法暴露&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A: 抽象写一个组件后，在引用页面用&lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt;调用组件内方法控制弹窗开关。&lt;/p&gt;
&lt;p&gt;没了。&lt;/p&gt;
&lt;h4&gt;Q: nanachi还是taro好&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;hint: null&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A: taro。&lt;/p&gt;
&lt;p&gt;其实也真的很喜欢并崇拜司徒大佬。之前在水群的时候看到有个人说“国内前端网红能傲然在个人简介上写‘精通js、dom’的大概也就只有他了”时深以为然。但一码归一码，nanachi的完成度比不上taro……前者目前暂时更倾向于一个实验性项目，虽然他在转译器的书写上可能更胜taro一筹，但是转译框架这个东西……已经是生态级别的工程了。&lt;/p&gt;
&lt;p&gt;司徒大佬请不要因为我这篇博文而在以后的某天我有机会面试去哪儿时暴打并拒绝我……我真的很希望能跟随菊苣的!请看我胸口的一片热诚（撕开衣服…&lt;/p&gt;
&lt;p&gt;晚安各位。希望公司能撑到年后，不负我现在不辞职跳槽的信念……&lt;/p&gt;
&lt;p&gt;2018年12月10日23点22分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[攻壳机动队2：无罪]]></title><description><![CDATA[前言 我该打……我拖延了…… 攻壳系列是难得我从真人电影入坑并到最后走向原著并花钱入手实体书的作品（说来惭愧我花在二次元上的钱并不多……支持正版的行为更是屈指可数 哭），本身的优秀程度无需我多言，从原著在断更1…]]></description><link>http://blog.inori.icu/2018-12-09/</link><guid isPermaLink="false">http://blog.inori.icu/2018-12-09/</guid><pubDate>Sun, 09 Dec 2018 14:46:56 GMT</pubDate><content:encoded>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;我该打……我拖延了……&lt;/p&gt;
&lt;p&gt;攻壳系列是难得我从真人电影入坑并到最后走向原著并花钱入手实体书的作品（说来惭愧我花在二次元上的钱并不多……支持正版的行为更是屈指可数 哭），本身的优秀程度无需我多言，从原著在断更15年后依然被好莱坞相中并搬上大荧幕这点就足以通俗表明。说起来有趣的一点是，荧幕上攻壳的形象是灰暗而（相对）严肃的，但在阅读原著后才了解到，原著中的攻壳笔触其实相对明快，虽然涉及的领域、思考一致，但是很好地使用各种小闹剧一笔带走，并不会在阅读后让人产生压抑感。本文则是在阅读原著后再次观看 攻壳2：无罪 所带来的观感。（好险，差点扯远了&lt;/p&gt;
&lt;h3&gt;观看预警&lt;/h3&gt;
&lt;p&gt;从文体上来看本文不属于正统观后感或诸如此类的东西，因为我的文学功底并不好但是又十分想分享一点东西，所以本文属于看到哪想到哪就写到哪的类型。&lt;/p&gt;
&lt;h3&gt;剧透&lt;/h3&gt;
&lt;p&gt;本文包含大量剧透（其实也不算很大量…自认已经很节制了但是毕竟是感想总跟剧情分不开），不如说本文的行文线索就是整个电影的的播放进度……&lt;/p&gt;
&lt;p&gt;我是真的一边二周目一边暂停写感想的……&lt;/p&gt;
&lt;h3&gt;阅读建议&lt;/h3&gt;
&lt;p&gt;建议满足所有以下条件的人群阅读&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对本电影已经一周目了（最最最最最最最最基本的阅读观后感条件&lt;/li&gt;
&lt;li&gt;对剧情整体依旧保有着一个相对清晰的记忆（不然你会对下文感到特别诧异：这在说啥&lt;/li&gt;
&lt;li&gt;时间多无处打发且不在意浪费在一篇文笔糟糕得朴素博文上（🤦‍&lt;/li&gt;
&lt;li&gt;不会打我（&gt;_&amp;#x3C;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;正文真的要来了&lt;/h3&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;以下电影一词特指 &lt;code class=&quot;language-text&quot;&gt;攻壳机动队2: 无罪&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://movie.douban.com/subject/1291566/&quot;&gt;豆瓣&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bangumi.tv/subject/238&quot;&gt;Bangumi番组计划&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电影全程充斥了大量符号意义的文字，比如开头“觀”字覆盖的摄像头。在一开始观看时我还以为自己拿到了假冒伪劣的影像，一般而言科幻电影在描述未来产物时都会浓墨重彩的堆砌零件细节（是的我就是说Iron Man）,比如接下来几分钟后出现的十分带有未来感的警车。&lt;/p&gt;
&lt;p&gt;比较不明白的地方：在取回人偶核验情况时，托古沙和巴特两人经过的的是，一个跳蚤市场？一个带机密性质的场所建立在跳蚤市场上？&lt;/p&gt;
&lt;p&gt;托古沙和哈乐葳（我是按着日版繁中的翻译来的了……)的对话也是比较有意思的一段。首先是“自杀”与“自毁”一词的特意区分（在后边的剧情中就没有像此刻一样有意区分），一个不起眼的伏笔。我感觉好的电影就该像这样，在适当的时候抛出一个出刊符合主题背景的思考冲突，而结尾时遥相呼应。然后时关于幼童与人偶的思辨，这里始终觉得导演（编剧？）像表达的并不是台词所传述的那样，幼童是否是人类，又抑或是人类对人偶的思念的延续？这与最后的真相似乎有所相关，但又让我感到莫名的差距：这段对话似乎是在思考另一个同等严肃的问题。&lt;/p&gt;
&lt;p&gt;我最最最最最会心一笑（酸）的场景大概就是石川载巴特回去的一小节。背景音乐&lt;a href=&quot;https://music.163.com/#/song?id=568219&quot;&gt;River of Crystals&lt;/a&gt;缓缓响起，石川娓娓交待少校消失的故事背景，与巴特两人进行着单身味浓重的对话，挖出搭档change后巴特的些许落寂————“石川，你最近变多嘴了”（生气&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt; “Nothing last”, you said&lt;/p&gt;
&lt;p&gt; but everything still hold meaning in my heart&lt;/p&gt;
&lt;p&gt; …&lt;/p&gt;
&lt;p&gt; i hear your voice echoing&lt;/p&gt;
&lt;p&gt; but i am still alone, i am alone, alone…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回家之后，只有一条老狗出来迎接，连啤酒都是老狗的标记，似乎这里只有这一条老狗在维持着巴特家的感觉……再看看我，连狗都没有……&lt;/p&gt;
&lt;p&gt;（不许吐槽老狗！我也不知道狗老不老！但这是必要的修辞手法！用来衬托主人公寂寞的心境……好吧，我编不下去了，鬼知道我写原稿的时候是怎么想的，我现在只是把稿子的字一个一个敲上来&lt;/p&gt;
&lt;p&gt;去了流氓地盘上看到巴特一言不合掏机枪的懵圈托古沙好可爱！
一脸酷爽挺直腰挨骂的巴特也好可爱！还有托古沙那个小眼神：you see you !老爷子说的就是你！锤你小胸口！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中途唱诗那段开始我就有点看不来了。剧情在看过原著后能跟上没错，但是对于各种场景切换，也就只有壮观一感，剩下都是懵圈。在心境有了改变后会做四周目的重温。&lt;/p&gt;
&lt;p&gt;全片的最后一段。救出小女孩后静静听取了事情缘由的巴特怒气反问：“难道你都没考虑过牺牲者？我倒可不是说那些人类，我说的是，那些被你牺牲的人偶！”女孩一愣，随后委屈反驳：“毕竟，毕竟我也不想变成人偶啊！”电影副标题中无罪一词，大概也意在此处了。因故袭击人类的人偶，看似万恶实则“无辜“；渴求救赎而呼喊的幼童，看似无罪却以本意”杀害“人偶。&lt;/p&gt;
&lt;h3&gt;后&lt;/h3&gt;
&lt;p&gt;敲完全篇之后，心里越发觉得全文并没有准确地把自己地心境给表现到文字上。但又无法：再推倒重来，大概也不会好到哪里去，甚至有更差的可能性。就这样吧，当作日记一般便是。&lt;/p&gt;
&lt;p&gt;晚安各位&lt;/p&gt;
&lt;p&gt;2018年12月10日00点45分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[关于重试]]></title><description><![CDATA[…]]></description><link>http://blog.inori.icu/2018-11-29/</link><guid isPermaLink="false">http://blog.inori.icu/2018-11-29/</guid><pubDate>Thu, 29 Nov 2018 14:20:42 GMT</pubDate><content:encoded>&lt;p&gt;今天一天下来的总结就是：搬石头砸自己脚。&lt;/p&gt;
&lt;p&gt;关于重试这个需求其实一直都伴随着我的代码，但是以前都觉得麻烦一直选择性忽视。到了今天感觉不能继续躲了（主动 被动因素都有就是了），然后一天都坑在这上边了，完全不知道怎么着手进行。&lt;/p&gt;
&lt;h3&gt;迭代重试&lt;/h3&gt;
&lt;p&gt;最初想出来的重试流程是把自身的变量定义传到retry函数里作为一个参数；当条件不符合以及重试数不达标时，迭代调用传入的函数。这里涉及到一个问题就是返回流程，搞了一天我都没搞好迭代的返回应该怎么处理（回家走路时想了一下觉得有一套路子可行但是代码写出来并不优雅…而且也还是有点绕…）。&lt;/p&gt;
&lt;h3&gt;解耦重试流程&lt;/h3&gt;
&lt;p&gt;回家后洗澡继续想，慢慢地思维变得正常起来：既然之前的流程时迭代的，迭代对于自己来说有点绕，那能不能改成常规循环？怎么才能满足循环条件？&lt;/p&gt;
&lt;p&gt;要循环调用，就意味着，循环体与循环语句必须解耦，两者需要互不干扰。&lt;/p&gt;
&lt;p&gt;之前的写法是 函数运行-&gt;(inside)判断函数是否合规-&gt;不合规就调用函数本体 ,但是重试后合规的话，应该怎么返回，这里有点绕了- -（是的我知道我很菜&lt;/p&gt;
&lt;p&gt;现在要解耦，那就需要 生成值的函数 与 判断值的函数 必须分开，然后由重试函数包裹进行判断重试。理解这一层后重试函数就不难实现了。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
  &lt;span class=&quot;token selector&quot;&gt;#count::after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;isRight&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.999999999999&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;tryAble&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;maybe&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isRight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; times&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; flag
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      count &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; times &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;flag
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; val

      count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;maybe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isRight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;done at: &apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;tryAble&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maybe&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isRight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ps: 或许会更新注释以及添加砸自己脚的那个重试写法（的正确版本）。&lt;/p&gt;
&lt;p&gt;晚安各位&lt;/p&gt;
&lt;p&gt;2018年11月29日 22点23分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[晚归，小程序，预告]]></title><description><![CDATA[第一篇更新，这是个好势头？ 写了好一阵子的小程序了，jd的tora框架。回头看了一眼当初选这个框架时喜欢的特性，其实一个都没用上（原声兼容，自带starter,能集成dva）；中间甚至发现了奇怪的坑（当然，这中间有一大部分其实算是小程序自带的坑）。 再次遇到了底部栏input…]]></description><link>http://blog.inori.icu/2018-11-27/</link><guid isPermaLink="false">http://blog.inori.icu/2018-11-27/</guid><pubDate>Tue, 27 Nov 2018 14:13:36 GMT</pubDate><content:encoded>&lt;p&gt;第一篇更新，这是个好势头？&lt;/p&gt;
&lt;p&gt;写了好一阵子的小程序了，jd的tora框架。回头看了一眼当初选这个框架时喜欢的特性，其实一个都没用上（原声兼容，自带starter,能集成dva）；中间甚至发现了奇怪的坑（当然，这中间有一大部分其实算是小程序自带的坑）。&lt;/p&gt;
&lt;p&gt;再次遇到了底部栏input被键盘遮挡的问题，心里感觉实在无解但是看着**领导丢出来的小红书，他居然能做到我切换键盘高度后会自动适配，心里又燃起一阵对抗。明天尝试用resize特性来实现一下，看能不能搞定。&lt;/p&gt;
&lt;p&gt;这周末看起来应该会是双休，公司都在预定去团建了。到时候应该会再更新一篇&lt;a href=&quot;https://zh.moegirl.org/%E6%94%BB%E5%A3%B3%E6%9C%BA%E5%8A%A8%E9%98%9F2_%E6%97%A0%E7%BD%AA&quot;&gt;攻壳机动队2：无罪&lt;/a&gt;的观后感。&lt;/p&gt;
&lt;p&gt;各位晚安。&lt;/p&gt;
&lt;p&gt;2018年11月27日 22点24分&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[搞了好久终于把gatsby搞定了！个人的第一个博客应该算是正式开始了。 估计也没啥人看得到就是了 -_- 2018年11月26日 00点05分]]></description><link>http://blog.inori.icu/hello-world/</link><guid isPermaLink="false">http://blog.inori.icu/hello-world/</guid><pubDate>Sun, 25 Nov 2018 15:58:43 GMT</pubDate><content:encoded>&lt;p&gt;搞了好久终于把gatsby搞定了！个人的第一个博客应该算是正式开始了。&lt;/p&gt;
&lt;p&gt;估计也没啥人看得到就是了 -_-&lt;/p&gt;
&lt;p&gt;2018年11月26日 00点05分&lt;/p&gt;</content:encoded></item></channel></rss>