{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-01-16/1/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"ec616d95-9776-55b3-8dec-e7c2807636d3","excerpt":"为什么突然揭 ⚰ 而起 最近算是逐渐熟悉手头的工作节奏了，跟同事磨合之后原本比较麻烦的事情也慢慢因为习惯、共识得到简化了。 immer immer 是一个好文明，它通过 monkey patch 每种能想到、能 patch 的操作，让我们使用熟悉的 api…","html":"<h2>为什么突然揭 ⚰ 而起</h2>\n<p>最近算是逐渐熟悉手头的工作节奏了，跟同事磨合之后原本比较麻烦的事情也慢慢因为习惯、共识得到简化了。</p>\n<details>\n  <summary>秘密</summary>\n  <p>\n    加之下午在群里看到某前辈分享了一篇关于“如何在react\n    useState里使用set”的外语文章，怀着满心欢喜点进去后却发现只是对set数据结构做一个简单介绍&给出了一个如何在useState中使用set结构的方法：每次setState都`new\n    Set()`一次。(掀桌(╯‵□′)╯︵┻━┻\n  </p>\n  <p>我也可以氵一篇“如何在react中使用数组”(二次掀桌(╯‵□′)╯︵┻━┻</p>\n</details>\n<h2>immer</h2>\n<p>immer 是一个好文明，它通过 monkey patch 每种能想到、能 patch 的操作，让我们使用熟悉的 api、语法的同时，把 mutable 操作全部内部变成 immutable 操作，每次修改都会返回新对象而且更新范围能维持在最小——甚至如果你没修改，那更新范围是 0，返回原对象。</p>\n<h2>如何在 useState 里结合 immer 使用？</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> clickHandle <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>preSelected<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>preSelected<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>selected<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      selected<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>clickHandle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>这看起来有点糟糕？跟<code class=\"language-text\">new Set()</code>方案没什么区别，也就少了个 new 操作。</p>\n<h2>加一点魔法 ✨</h2>\n<p>这个想法其实来源于<code class=\"language-text\">dva-immer</code>, 各位可以先看看它的<a href=\"https://www.npmjs.com/package/dva-immer\">介绍</a>。基本思路就是通过封装，把原本 useState 返回的 set 操作，封装在 produce 里。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> useImmer <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initalValue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initalValue<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> setStateThroughImmer <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>producer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>preState<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>preValue <span class=\"token operator\">=></span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>preValue<span class=\"token punctuation\">,</span> producer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setStateThroughImmer<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ==============</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useImmer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> clickHandle <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span>preSelected <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    selected<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>clickHandle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>改进</h2>\n<p>immer 的<code class=\"language-text\">produce</code>其实可以接受第三参数，<a href=\"https://immerjs.github.io/immer/docs/patches\">用来记录操作顺序，方便做 undo/redo 等</a>；同时上边的 ts 类型也写得比较简单，详细一点的话可以适配更多的操作场景，比如指定了类型但是初始值是<code class=\"language-text\">undefined</code>的情况，通过覆（抄）写<code class=\"language-text\">useState</code>的类型可以达到与原<code class=\"language-text\">setState</code>完全一致的 API 暴露。</p>\n<p>搜索了一下 npm 之后，也发现早有前辈写类似的东西了，基于 immer 的<a href=\"https://www.npmjs.com/package/use-immer\">use-immer</a>和基于<a href=\"https://www.npmjs.com/package/immutable\">immutable</a>的<a href=\"https://www.npmjs.com/package/use-immutable\">use-immutable</a>。前者是 immer 维护者的库，质量有保证；后者民间维护但貌似还附带了 Reactivity 的特性，直接修改就行，不用 set（这好还是不好…不评价）。</p>\n<h2>之后</h2>\n<p>应该会再有一篇关于用 immer 的 patch 做变更检测的氵文和一篇对 dva 做一层 factory 来达到 ts 提示的文章，前者还在想法雏形，后者已经在我的个人项目实际用上了，体感愉悦。</p>","frontmatter":{"title":"在react里边使用ES6 Set数据结构","date":"January 16, 2021"}}},"pageContext":{"slug":"/2021-01-16/1/","previous":{"fields":{"slug":"/2019-11-09/1/"},"frontmatter":{"title":"对env的理解"}},"next":null}},"staticQueryHashes":[]}