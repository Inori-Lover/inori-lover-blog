{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-12-17-2/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"50e19169-3df4-5a4d-afef-3f7b28da70cf","excerpt":"原型 其实阮一峰在他自己的(博客)http://www.ruanyifeng.com/blog/2011/06/designingideasofinheritancemechanisminjavascript.html…","html":"<h1>原型</h1>\n<p>其实阮一峰在他自己的(博客)[http://www.ruanyifeng.com/blog/2011/06/designing<em>ideas</em>of<em>inheritance</em>mechanism<em>in</em>javascript.html]里边说的挺好的了,当初看这个文章就觉得有点牛皮但是也就那样，没有进一步去多想。最近想了解这方面的东西的时候又一下子没想起来自己绕了挺大的圈子。</p>\n<p>js在设计之初以简单为原则，所以拒绝引入完整的oop套路，简化成为new操作直接调用 constructor 而不是像传统的oop一样是调用整个class定义。这带来的一个问题就是：在oop思想里边，我们除了要定义对象本身的、不共享的东西，还要定义对象共享的东西，直接把new操作等同执行constructor函数造成的问题就是无法无法继承了，每个new操作都只是一个函数的返回值而已，为了实现继承机制，js添加了原型链的机制。</p>\n<p>每个对象都有各自的原型，原型也会有自己的原型，直到最后的原型：<code class=\"language-text\">null</code>。对对象进行取值时，会按着原型链一层一层往上查找自身没有的属性（方法）。为了记录自己的原型，每个对象都会有一个内置属性<code class=\"language-text\">[[Prototype]]</code>记录下自身的原型，常见的原型获取手段<code class=\"language-text\">__proto__</code>读写的也是这个内置属性。</p>\n<blockquote>\n<p>附带说一句虽然这个属性虽然很广泛但严格意义上并不是标准属性，读写这个内置属性的标准做法应该是使用ES6(ES5.1 ?)中<code class=\"language-text\">Object.getPrototypeOf</code>和<code class=\"language-text\">Object.setPrototypeOf</code>方法。</p>\n</blockquote>\n<p>原型链这个概念比较麻烦的是new操作中指定原型：对<code class=\"language-text\">constructor</code>进行new操作得到的对象的<code class=\"language-text\">__proto__</code>属性是<code class=\"language-text\">constructor.prototype</code>。这里冒出来的<code class=\"language-text\">prototype</code>是？</p>\n<h1>prototype</h1>\n<p><code class=\"language-text\">prototype</code>是js里内置constructor的一个属性，内容均为特殊的<code class=\"language-text\">ƒ () { [native code] }</code>（js引擎原生内容），而对这类内置constructor直接进行new操作得到的对象也同样会有这么一个属性，方便进行继承构造。</p>\n<h1>手动new</h1>\n<p>正确理解上边的内容后自己实现new操作已经扫清一大半障碍了，剩下的事情其实就是随意读一下规范看规范有没有别的坑没摸到的程度了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">cunstomNew</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Function</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'constructor must be a function'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  that<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span>prototype\n  that<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> constructor\n\n  <span class=\"token keyword\">return</span> that\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">cunstomNew</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>午安\n2018年12月17日18点06分</p>","frontmatter":{"title":"一些想补的基础：new机制，原型","date":"December 17, 2018"}}},"pageContext":{"slug":"/2018-12-17-2/","previous":{"fields":{"slug":"/2018-12-17/"},"frontmatter":{"title":"create-react-app@2 withTS 编译速度跟dll的关系"}},"next":{"fields":{"slug":"/2018-12-28/"},"frontmatter":{"title":"关于imm*类数据不可变库的一些想法"}}}},"staticQueryHashes":[]}