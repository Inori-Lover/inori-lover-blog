{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-12-10/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"f6164965-dcdb-5190-9947-4300a90cf97d","excerpt":"辣鸡基友放我飞机不带我飞，那就顺便把之前欠下的目标给补一下好了。（好难得连续更新的居然是因为基友放飞机，看来我真的有点堕落 行文 这次主要会以QA的方式来记录这个月来小程序开发的一些心得了, 以taro为基础。 Q: 小程序登陆怎么做？ hint: wx.login是重点 A…","html":"<p>辣鸡基友放我飞机不带我飞，那就顺便把之前欠下的目标给补一下好了。（好难得连续更新的居然是因为基友放飞机，看来我真的有点堕落</p>\n<h3>行文</h3>\n<p>这次主要会以QA的方式来记录这个月来小程序开发的一些心得了, 以<a href=\"https://github.com/NervJS/taro\">taro</a>为基础。</p>\n<h4>Q: 小程序登陆怎么做？</h4>\n<blockquote>\n<p>hint: wx.login是重点</p>\n</blockquote>\n<p>A: 小程序的登陆说简单也不简单，说难受也不难受，全在于你对微信的整套体系熟悉以及接受得了不。这边在实际项目中整体登陆逻辑往简单方向靠没有做太多花样，sso做授权管理：</p>\n<ol>\n<li>检查本地是否有sso，没有就进行2，有则跳到4</li>\n<li>wx.login函数调用获得一个token性质的东西丢给后端，后端经过一顿捣鼓封装好请求后丢给腾讯服务器，腾讯返回用户信息。这个时候服务器已经可以拿到用户的openid做个体识别创建用户条目了，当然如果你认证够格还能拿到uniid。</li>\n<li>在步骤2中丢token给后端后等待后端返回用户基本信息以及自家的sso。</li>\n<li>依据业务需求检查（缓存或者步骤3返回的响应）是否需要用户的个人信息，用户信息包括两方面：一是头像昵称性别这类opendate性质的信息，另一是手机号码。这两类信息获取流程一般是检查后端缺什么，举栗如果缺昵称，那么先检查有没有获取用户opendate的权限（这个在删除小程序后会重置授权），有则可以直接调用api获取不需要用户交互；没有获取权限则需要显示弹层或者跳转授权页等方式展示一个<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/button.html\">button</a>给用户，提示用户进行授权。当然，如果什么都不缺，那就不用处理任何东西。</li>\n</ol>\n<h4>Q: 小程序瀑布流怎么做</h4>\n<blockquote>\n<p>hint: flex-box</p>\n</blockquote>\n<p>A: 瀑布流网上有好多种实现方式，甚至有算着高度然后绝对定位的……看着就冒冷汗。这边直接使用flex-box实现，一行<code class=\"language-text\">display: flex;</code>丢给瀑布流总容器，然后你想要多少条瀑布流就建立多少个瀑布流“流容器”，各个流容器之间的排布是不会互相影响的，就这么简单。</p>\n<p>什么？还不懂？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'xx.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'xx.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'xx.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'xx.jpg'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token punctuation\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'space-between'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> flex<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flexBasis<span class=\"token punctuation\">:</span> <span class=\"token string\">'48.8%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>\n        images<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>img <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> flex<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flexBasis<span class=\"token punctuation\">:</span> <span class=\"token string\">'48.8%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>\n        images<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>img <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Q: 小程序吸底输入栏怎么做</h4>\n<blockquote>\n<p>hint: 小程序<code class=\"language-text\">input</code>组件的<code class=\"language-text\">cursor-spacing</code>、<code class=\"language-text\">adjust-position</code>以及<code class=\"language-text\">bindfocus</code></p>\n</blockquote>\n<p>A: 小程序里边的做fixed定位底部的input在默认情况下其实就已经不会有阻挡的问题，实在有需求的话就设置一下<code class=\"language-text\">cursor-spacing</code>控制input与键盘的距离。这里抛出这个问题主要是指有些产品会要求“页面不上推同时input做吸底效果”。这个时候需要把<code class=\"language-text\">adjust-position</code>设假值并在<code class=\"language-text\">bindfocus</code>中获取键盘高度设置到style中。一开始我也是以为做resize监听啥的……白绕一圈后跟着偷懒去抽烟的同事吹吹风后回来就看到这个api了。事实再次证明偷懒是第一生产力（我不抽烟，所以抽烟在这里不算生产力）。</p>\n<h4>Q: 小程序弹窗组件怎么做</h4>\n<blockquote>\n<p>hint: taro提供的<code class=\"language-text\">ref</code>做方法暴露</p>\n</blockquote>\n<p>A: 抽象写一个组件后，在引用页面用<code class=\"language-text\">ref</code>调用组件内方法控制弹窗开关。</p>\n<p>没了。</p>\n<h4>Q: nanachi还是taro好</h4>\n<blockquote>\n<p>hint: null</p>\n</blockquote>\n<p>A: taro。</p>\n<p>其实也真的很喜欢并崇拜司徒大佬。之前在水群的时候看到有个人说“国内前端网红能傲然在个人简介上写‘精通js、dom’的大概也就只有他了”时深以为然。但一码归一码，nanachi的完成度比不上taro……前者目前暂时更倾向于一个实验性项目，虽然他在转译器的书写上可能更胜taro一筹，但是转译框架这个东西……已经是生态级别的工程了。</p>\n<p>司徒大佬请不要因为我这篇博文而在以后的某天我有机会面试去哪儿时暴打并拒绝我……我真的很希望能跟随菊苣的!请看我胸口的一片热诚（撕开衣服…</p>\n<p>晚安各位。希望公司能撑到年后，不负我现在不辞职跳槽的信念……</p>\n<p>2018年12月10日23点22分</p>","frontmatter":{"title":"工作小结","date":"December 10, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-12-10/","previous":{"fields":{"slug":"/2018-12-09/"},"frontmatter":{"title":"攻壳机动队2：无罪"}},"next":{"fields":{"slug":"/2018-12-17/"},"frontmatter":{"title":"create-react-app@2 withTS 编译速度跟dll的关系"}}}}}