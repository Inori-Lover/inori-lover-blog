{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-01-31/1/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"6a58df4e-a9b3-5345-a290-6b3cd20ddd3b","excerpt":"总则（排名分先后） 方便互调 就近 分类 细则（排名不分先后） 目前还是以umi 的推荐结构作为基础，分 src/public 结构，src 下则有 pages（页面）/components（组件）/models（数据）/utils（工具）/assests…","html":"<h2>总则（排名分先后）</h2>\n<ol>\n<li>方便互调</li>\n<li>就近</li>\n<li>分类</li>\n</ol>\n<h2>细则（排名不分先后）</h2>\n<ul>\n<li>目前还是以<a href=\"https://umijs.org/docs/directory-structure\">umi 的推荐结构作为基础</a>，分 src/public 结构，src 下则有 pages（页面）/components（组件）/models（数据）/utils（工具）/assests（静态资源） 基础全局结构，pages（页面） 下则分布各个业务文件夹及其局部的 components（组件）/models（数据）/utils（工具）/assests（静态资源）</li>\n<li>public 目前建议放置的目标是项目外部依赖（本地业务不需要的，构建时不走编译流程单纯挂上的那种），比如因为历史原因/客户需求项目需要挂上的全局工具函数（如 jq）用于兼容可能存在的外部逻辑</li>\n<li>\n<p>静态资源目前推荐使用就近原则放置：找最近的 assests（静态资源）文件夹细分放置，细分文件夹命名与使用方同名；</p>\n<blockquote>\n<p>如<code class=\"language-text\">src/app.tsx</code>需要引用一个背景图，在全局的 assests（静态资源）文件夹下细分 app 文件夹，然后背景图放在 app 文件夹内即可</p>\n</blockquote>\n<blockquote>\n<p>如全局的 components（组件）就优先使用全局的 assests（静态资源），局部的 components（组件）就优先使用局部的 assests（静态资源）；如全局 components（组件）的<code class=\"language-text\">Loading</code>组件依赖一个<code class=\"language-text\">loading.svg</code>，那么这个 svg 就放在全局的 assests（静态资源）文件夹下的 components 文件夹的 Loading 文件夹下</p>\n</blockquote>\n<blockquote>\n<p>文件本体命名/是否能/应该细分子文件夹等细节视作内部黑箱，内部实现内部管理（等出现好的通用规则再细分规范）</p>\n</blockquote>\n</li>\n<li>\n<p>在 pages 同级下，包含 services（请求）文件夹；无论谁、在哪使用到请求，统一放在全局</p>\n<blockquote>\n<p>这是考虑到业务之间交叉调用而定的，假设为了一点点的体积而局部声明，那么想复用的话就需要先想：究竟是那个领域最先用到这个接口，然后再去排错去找，就很麻烦</p>\n</blockquote>\n</li>\n<li>\n<p>services（请求）文件夹下设 base（基础逻辑）/apis（接口地址）/requests（具体请求）文件夹</p>\n<ul>\n<li>base 用于定义请求层通用逻辑，如认证、错误处理、缓存/超时/取消、请求预处理等</li>\n<li>apis 用于定义接口地址，与 pages（页面）要求类似，按照业务域划分，一个业务域<strong>一个文件</strong>，文件内每个地址单独 export，然后<code class=\"language-text\">apis/index.js</code>里面<code class=\"language-text\">export * as business from &#39;./business&#39;</code></li>\n<li>requests 用于具体的接口抽象逻辑及其接口类型，与 pages（页面）要求类似，按照业务域划分，一个业务域<strong>一个文件夹</strong>，文件夹下设<code class=\"language-text\">types.ts</code>与<code class=\"language-text\">index.ts</code>, 前者定义出入参，后者书写具体的请求抽象函数</li>\n</ul>\n<blockquote>\n<p>Q: 一个基础接口被多个业务域共同依赖且可能其中一些有特殊的 预处理/后处理 怎么办？\nA: apis 内依然接口定义划分定义位置，requests 可放在己方调用域内，如<code class=\"language-text\">cos/upload</code>（多媒体上传），可能共同被用户信息、评论留言依赖，这时接口地址 export 还是放在<code class=\"language-text\">cos.ts</code>内，requests 则可以调用方自己管自己，各自写一份；code review 时再考虑合并优化等事宜</p>\n</blockquote>\n</li>\n<li>在 pages 同级下存在 types（类型定义）文件夹，用于定义本地业务用到的类型定义，按照业务领域划分文件夹分开存放</li>\n<li>components（组件）尽量复用 types（类型定义）文件夹的导出类型，存在历史原因、实现难度等使用成本过高的，在局部新建 types（类型定义）文件夹单独导出</li>\n<li>umi 中提及的 layouts 文件夹目前没有太好的想法，觉得用处不大（定义了就影响所有全局，没得逃避，创建时压力很大），建议不用</li>\n</ul>\n<h2>change-log</h2>\n<ul>\n<li>暂无</li>\n</ul>","frontmatter":{"title":"如何组织一个前端项目（持续更新系列）","date":"January 31, 2021"}}},"pageContext":{"slug":"/2021-01-31/1/","previous":{"fields":{"slug":"/2021-01-23/1/"},"frontmatter":{"title":"使用immer patch特性实现表单修改检测"}},"next":null}},"staticQueryHashes":[]}