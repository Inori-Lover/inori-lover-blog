{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-05-08/1/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"bced5650-9a08-51f6-8174-2eaea9f5c41a","excerpt":"缘由 最开始接触到取模操作会影响随机性是在nanoid这个库的 README 里：“random % alphabet is a popular mistake to make when coding an ID generator.“（是一个常见于各类 ID…","html":"<h2>缘由</h2>\n<p>最开始接触到取模操作会影响随机性是在<a href=\"https://github.com/ai/nanoid#security\">nanoid</a>这个库的 README 里：“random % alphabet is a popular mistake to make when coding an ID generator.“（<code class=\"language-text\">random % alphabet</code>是一个常见于各类 ID 产生器的错误）。为什么？怎么解决？</p>\n<h2>为什么取模操作是一个错误</h2>\n<p>先从简单的例子起步会比较容易理解。举例，我们需要一个<code class=\"language-text\">0</code>到<code class=\"language-text\">5</code>的随机数，实现如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> random <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">Math.random() * 10 \\| 0</code></th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%6</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>可以观察到，<code class=\"language-text\">0</code>到<code class=\"language-text\">3</code>比其他数字<strong>多出现一次</strong>，（假设 Math.random 的分布是均匀的）<code class=\"language-text\">0</code>到<code class=\"language-text\">3</code>出现的概率是<code class=\"language-text\">20%</code>, 而其它的只有<code class=\"language-text\">10%</code>，差距足有一倍。为什么会出现这个情况？\n这是因为取模结果集合可以视为在一个无限长的周期重复序列中取指定长度的结果，当你截取的长度不是周期的整数倍时，就一定会在尾部出现不够一个周期长度的序列，这部分的值总会比其他数组<strong>多出现一次</strong>。比如上表中就是在周期长度为 6 的无限长周期重复序列中取前 10 个数，末尾的 4 个数字就比其他数字<strong>多出现一次</strong>了。</p>\n<h2>怎么解决？</h2>\n<h3>不抛弃取模操作</h3>\n<p>上边我们已经分析了，取模操作造成分布不匀是因为不够一个周期的尾部数字<strong>多出现一次</strong>造成的，只要把这个多出现一次的概率差尽量压低，取模操作就还是可以使用的。设<code class=\"language-text\">r</code>为周期，<code class=\"language-text\">l</code>为序列长度，可得序列内出现的完整周期个数为<code class=\"language-text\">Math.floow(l/r)</code>(记为<code class=\"language-text\">b</code>)，而不完整周期的数字出现次数则是周期个数加一，概率差可表示为<code class=\"language-text\">P = ((b+1)/l - b/l) / (b/l)</code>，分子分母同乘<code class=\"language-text\">l</code>简化，最后可得<code class=\"language-text\">P = 1 / b = 1 / Math.floow(l/r) ≈ r/l</code>。（这推导真是乱…找个时间尝试下<code class=\"language-text\">MathML</code>来写公式了\n根据推导公式进行定性分析，只要<code class=\"language-text\">r</code>越小、<code class=\"language-text\">l</code>越大，这个概率差距就越小。由于<code class=\"language-text\">r</code>受控于用户输入，那么就只剩下<code class=\"language-text\">l</code>可控了，只要增大<code class=\"language-text\">l</code>，我们的目标就可以达成：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> random <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span></code></pre></div>\n<blockquote>\n<p>这个方法的限制也很明显，<code class=\"language-text\">r</code>受控于用户输入，只要<code class=\"language-text\">r</code>足够大，随机性差距还是会提高到不可接受的程度。</p>\n</blockquote>\n<h3>抛弃取模操作</h3>\n<p>其实更为正确的做法是对随机数进行缩放运算。假设我们需要拿的随机数就是<code class=\"language-text\">Math.random</code>函数输入的范围（大于等于 0，严格小于 1），那么我们的随机数映射函数就是<code class=\"language-text\">y = x</code>，完全的原样输出。当我们需要 0 到 5 的随机数，我们应该对<code class=\"language-text\">x</code>进行缩放：<code class=\"language-text\">y = (5 + 1)x</code>；这样我们就拿到了<code class=\"language-text\">x</code>在<code class=\"language-text\">0</code>到<code class=\"language-text\">6</code>区间的均匀缩放，结合<code class=\"language-text\">Math.floor</code>运算就可以拿到所需的随机数（注意<code class=\"language-text\">Math.random</code>拿到的值是严格小于 1 的）。同理，如果是要对最低值进行限制，只要最后加上最低值就可以了。</p>\n<blockquote>\n<p>其实<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#getting_a_random_number_between_two_values\">MDN</a>在对<code class=\"language-text\">Math.random</code>进行介绍时就给出了推荐的范围随机数获取手段，不如说取模操作能被大范围误用这个比较怪。我个人而言，对取模的误用起源于 C 语言课程，只要看到取范围马上就联想到取模了。</p>\n</blockquote>\n<h3>使用密码学安全的随机数产生方法</h3>\n<p>这个手段适用范围比<code class=\"language-text\">Math.random</code>要稍窄，这是因为它不仅产生速率较慢，而且需要在<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\">Secure contexts</a>下才能访问，更别提其涉及的<a href=\"https://caniuse.com/mdn-javascript_builtins_typedarray\">兼容性要求</a>。这里我们简单介绍下原理和使用方法。</p>\n<p><code class=\"language-text\">window.crypto.getRandomValues</code>是一个全局系统函数，它的存在意义就是提供一个密码学安全的随机源。它接受一个整数类型的<code class=\"language-text\">TypedArray</code>作为入参，调用后会同步往入参数组中填入随机值，之后对数组取值便可。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> int8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Int8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>int8<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>int8<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// - 2^7 ~ 2^7-1</span>\n<span class=\"token keyword\">const</span> uint8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>uint8<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uint8<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 ~ 2^8-1</span></code></pre></div>\n<h2>扩展</h2>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/27796927/answer/38122142\">Javascript 里 Math.random()产生的随机数的规律是什么？ - RednaxelaFX 的回答 - 知乎</a></li>\n<li><a href=\"https://www.zhihu.com/question/20222653\">如何评价一个伪随机数生成算法的优劣？</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_random_number_generators\">List<em>of</em>random<em>number</em>generators</a></li>\n<li><a href=\"https://www.anquanke.com/post/id/231799\">在 NodeJS/Chrome/chromium 中预测 Math.random()</a></li>\n<li><a href=\"https://liam.page/2018/01/12/Mersenne-twister/\">谈谈梅森旋转：算法及其爆破</a></li>\n</ul>","frontmatter":{"title":"如何是实现范围随机数取值","date":"May 08, 2021"}}},"pageContext":{"slug":"/2021-05-08/1/","previous":{"fields":{"slug":"/2021-04-18/1/"},"frontmatter":{"title":"Promise成本及有限并发"}},"next":{"fields":{"slug":"/2021-05-30/1/"},"frontmatter":{"title":"JS里的继承"}}}},"staticQueryHashes":[]}