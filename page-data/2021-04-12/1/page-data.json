{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-04-12/1/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"667c99bd-921e-55b8-945e-35987f35de98","excerpt":"tldr 把原本出去的对象赋值给一个构造器，通过对入参进行体操性质的类型推导，把各个部分的内容重新导出并附带上推导得到的类型。当然，为了使用体验，可能还会附带一些 utils 性质的辅助函数使 dispatch 和 subscribe 操作 typesafe…","html":"<h2>tldr</h2>\n<p>把原本<code class=\"language-text\">export default</code>出去的对象赋值给一个构造器，通过对入参进行体操性质的类型推导，把各个部分的内容重新导出并附带上推导得到的类型。当然，为了使用体验，可能还会附带一些 utils 性质的辅助函数使 dispatch 和 subscribe 操作 typesafe。代码见文末链接。</p>\n<h2>起源</h2>\n<p>除去其阿里身世及其没什么用的 fetch 相关功能设施（甚至还因此压入一个 poyfill 包），包括一些小的地方的设计个人而言有待商榷（比如给 saga 的 generator 内调用的 put 等操作自动加上 namespace 之类，可能是为了方便早期在厂内推广分包？因为这样就可以直接复制粘贴来改造了），dva 本身的理念我还是觉得很棒棒的；不仅把 redux 分包等麻烦操作通过封装掩盖起来，而且还能在此之上建立更高层的中间件概念，引出<code class=\"language-text\">dva-loading</code>、<code class=\"language-text\">dva-immer</code>等一些工程性很高的包。</p>\n<p>但随着 ts 逐渐走进我的生活，我越发觉得 js-base 的 dva 写法谈不上舒服，虽然通过前缀命名、语义化命名等操作可以方便利用查找搜索达到一定 dispatch 引用链的效果，但终究是治标不治本的操作。写逻辑时不仅经常为了能快速找到合适 saga 而同时打开多个 model，而且在监听、改写 state 的时候常常需要来回滚动定义、使用处来确认操作是否可行，更别说时常蹦出<code class=\"language-text\">Cannot read property &#39;xx&#39; of undefined</code>时 debug 起来有多恼火：来源的声明可能就是一张白纸，一个空对象甚至一个毫无关联的东西，然后通过多次骚操作来垒起勉强能用的结构；有可能发生在 dispatch 入参，有可能发生在 render，有可能发生在 redux，任何跟 state 关联的地方都有可能是错误来源。</p>\n<h2>第一次尝试：统统给我写 enum 和 state 定义</h2>\n<p>很简单粗暴，给每个用到数据的地方都手工标上定义，这样就都 typesafe 了不是么（狗头）；reducer 和 generator 都用 enum 命名，dispatch 时都用 enum 来做 key，需要时就把 namespace 也 import 进来拼接一下；对 state 做操作的时候全部重新覆盖一次类型定义，报错了就给我在 state 定义的地方加上，然后修补每一个因此报错的地方确保数据是兼容的。</p>\n<p>但这个想法别说工友，自己都时常顶不住。一个业务逻辑下来需要先声明一个结构，还要在每个用到的地方手工声明一次，而且因为类型在覆盖的时候常有<code class=\"language-text\">as any as XX</code>的写法，这相当于砍掉传入方向的类型检查，只检查了传出方向的类型了，<code class=\"language-text\">Cannot read property &#39;xx&#39; of undefined</code>问题仍然常见。</p>\n<h2>第二次尝试：每个出入参都先定义然后再 export 成工具函数来用</h2>\n<p>这里就有一定的体操成分了。通过把 useSelector、dispatch、actionFactory 等常见交互都封装成带类型的函数，用的时候就不需要手工覆盖类型就可以达到类型推导的效果。（以下代码仅为示意，老的代码懒得翻了，大概就是这个意思）</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">enum</span> ActionKey <span class=\"token punctuation\">{</span>\n  fetch <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  fetchS <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  fetchF <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ActionPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>ActionKey<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">[</span>ActionKey<span class=\"token punctuation\">.</span>fetchS<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">[</span>ActionKey<span class=\"token punctuation\">.</span>fetchF<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Actions<span class=\"token operator\">&lt;</span>Key <span class=\"token keyword\">extends</span> ActionKey <span class=\"token operator\">=</span> ActionKey<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> ActionPayload<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">namespace</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xx'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useSelector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> actionFactory <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ActionKey</span> <span class=\"token operator\">=</span> ActionKey<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  payload<span class=\"token operator\">:</span> ActionPayload<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> payload<span class=\"token operator\">:</span> ActionPayload<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">namespace</span><span class=\"token punctuation\">,</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> State<span class=\"token punctuation\">,</span>\n  effects<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>ActionKey<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>actions<span class=\"token operator\">:</span> Actions<span class=\"token operator\">&lt;</span>ActionKey<span class=\"token punctuation\">.</span>fetch<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/** */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>ActionKey<span class=\"token punctuation\">.</span>fetchS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n      state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span>\n      actions<span class=\"token operator\">:</span> Actions<span class=\"token operator\">&lt;</span>ActionKey<span class=\"token punctuation\">.</span>fetchS<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/** */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>ActionKey<span class=\"token punctuation\">.</span>fetchF<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n      state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span>\n      actions<span class=\"token operator\">:</span> Actions<span class=\"token operator\">&lt;</span>ActionKey<span class=\"token punctuation\">.</span>fetchF<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/** */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这套方案还是在我的职业生涯里活了挺长时间的。现在回头看看，这个方案也能用好长一段时间的估计也只有作为父母的自己了。虽说泛型的赋值有迹可循，代码给错类型的概率不大，而且不需要像第一个方案那样每个用的地方都重复声明。但是每写一个地方都需要按照规则写名称，写泛型传参，到处都是完完全全的填鸭式类型声明，一行逻辑十行类型，一点都没夸张。而且这种操作还要每个 model 都写一次（不知道是 ts 的 bug 还是我的姿势有问题，这些类型化过的函数无法通过泛型继续抽象，只能就地取值），一个业务逻辑用到多个 model 时更是会出现本该通用的抽象函数变成 model 限定的膈应用法。</p>\n<h2>第三次尝试，infer 的威力</h2>\n<h3>infer 是什么</h3>\n<p>我们先来看两段常见的类型玩具（嗯，不是体操）。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Promised<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>infer Result<span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> Result <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token comment\">// type Test = Promised&lt;Promise&lt;number>>; => type Test = number</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Params<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> infer Result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> Result <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token comment\">// type Test = Params&lt;(value: number) => {}>; => type Test = number[]</span></code></pre></div>\n<p><code class=\"language-text\">infer</code>关键词是 ts2.8 引入的，关于的它的介绍也集中在 2.8 的<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\">发布文档</a>中。根据介绍，infer 一般（只能？我都没见过有在别的地方见过）用在三元表达式中的第一部分作为推断引用，然后在 true 分支（第二部分）返回（当然了，皮一下，在 false 分支返回也是完全没有问题的）。</p>\n<h3>infer 带来了什么</h3>\n<p><code class=\"language-text\">infer</code>最大的利好就是允许我们先写代码、再考虑类型，摆脱什么都要先定义、什么地方都要填鸭式声明类型的困境。虽然很多复杂结构都还是先自己定义比较好，但这种也仅限于业务模型的定义（ts 并不能理解业务），而且这种定义一定程度上可以说是移除不了的，就像数据库不能根据你的 write 就推断你存的数据类型一样，ts 项目也不可能完全避开业务类型的声明。<code class=\"language-text\">infer</code>带来了一丝可能：或许你可以只定义业务类型，然后剩下的我就可以根据你的逻辑代码都帮你<code class=\"language-text\">infer</code>(推断)出来。但凡推断失败彪红的，那就是类型冲突没法匹配上了。这时候你就要检查是定义错了，还是引用错了。我们用一段简单的代码演示一下，建议点代码末尾的 ts playground 在线体验下<code class=\"language-text\">type A</code>的定义提示。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionsCraetor<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>\n    actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> infer Payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    operations<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Generator<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> payload<span class=\"token operator\">:</span> Payload <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 这里我们声明一个函数，内部实现省略，就是一个结构映射而已\n * @param value 就是dva框架model文件的 export default 内容，把它填进来\n * @return { actionCreator: ActionsCraetor&lt;E> } 用来辅助创建typesafe的Action\n */</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">factory</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  effects<span class=\"token operator\">:</span> <span class=\"token constant\">E</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> actionCreator<span class=\"token operator\">:</span> ActionsCraetor<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actionCreator <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  effects<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> actionCreator <span class=\"token comment\">// { fetch: (payload: number) => ({ name: 'fetch', payload: number }) }</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAggxsAlgewHYGcDCAnAhhYZbAHgFEA+KAXigG8AoKKAbQGkpFUoBrCEZAGZRSAXQBcwtiKgQAHsAioAJuigAKRkyi4EKDBNpQwuEABtkuJRM4CI2KAAUT5y1AC+AGk1NkkPEjR0AH4JXFQQTQBKakoAcUU7XEISMJAPbXD01PJvKCD1YzMLK0dnYuiqSkNQSAlWAG4jMssJJyLXN1yJVAgANzt6TvoAegAqUahATfjAGcTARCNAG7lAB41AODNAADlAKjlAX8VAB1NAGH-AUMVAC4TAPO1ABudAQHdAU1ddwEYdQHozDcBlv0AQ80ACM0AQHUAYAMAn3V3AWDlAH1pUFGw3oSggcFMuGw0AEAFdULo0FABDpkiAyOQ1L1cKY4RADJoIAJbAh0BJSINIgZtEjUDgIEkiBJ4AEMDh8MlMe56PQ4IFgHRaWyGUz7G5qCi0UQQGoGExiaTgOS6LlRrZgHAABZyprtEqGRBKdzuGmFFwGjglVBwgC2ACM7CbPEK4LjTOkwHDBW5ovKtEwQIgIKZjW7TKY1DCAI749DAdKG42+3KeTRplP0GrQGCS7OCYV6UXJKDDYZCjXaiRqc3Fbp2x3YCqUXWoXC2glQADkla1Xc9zWtDadvvcQA\">ts playground</a></p>\n</blockquote>\n<h3>还缺什么</h3>\n<p>上边一段代码仅仅演示了怎么转换<code class=\"language-text\">effects</code>定义涉及的<code class=\"language-text\">action</code>, <code class=\"language-text\">reducers</code>同理处理完之后我们还需要照顾一下别的条件，比如<code class=\"language-text\">action</code>省略不写等；同时还要构建别的函数帮助 model 的使用，比如给<code class=\"language-text\">useSelect</code>提供 typesafe 的限定监听<code class=\"language-text\">state</code>中部分数据；比如支持<code class=\"language-text\">dva-loading</code>提供的 loading 标志；等。</p>\n<h3>roadmap</h3>\n<p>下一步就是整理代码和文档后上线成独立的 npm 包推广一下了…在这之前还想到做个 hack，想着怎么提供个方便的手法给扩展 factory 的导出，both in type &#x26; code。</p>\n<p>另外<code class=\"language-text\">effects</code>部分的 Generator 需要手动声明类型也是比较残念的部分，这个是前期在公司是想兼容公司的现存代码：有部分人喜欢用 dva 提供的“effects 任务 dispatch 的返回值是 Promise，可用来 resolve 得到 Generator 的 return 值”的<a href=\"https://github.com/dvajs/dva/blob/master/packages/dva-core/src/createPromiseMiddleware.js#L7\">特性</a>来做逻辑；如果移除这个需求的话，强制全部 any 应该问题不大。</p>\n<h2>code</h2>\n<p><a href=\"https://github.com/vcb-s/vcb_member_fe_admin/blob/master/src/utils/modelCreator/index.ts\">github</a></p>\n<h2>新发现</h2>\n<p><a href=\"https://pinia.esm.dev/core-concepts/#defining-a-store\">pinia</a>, vue 领域里的一个 state 管理新作, 跟上边提到的思路可谓一脉相承，异父异母的亲兄弟（跑</p>","frontmatter":{"title":"如何用ts类型体操加强dva书写体验","date":"April 12, 2021"}}},"pageContext":{"slug":"/2021-04-12/1/","previous":{"fields":{"slug":"/2021-04-11/1/"},"frontmatter":{"title":"敬友人"}},"next":null}},"staticQueryHashes":[]}