{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-05-30/1/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"b63d971e-1ec7-5c31-b50b-d35e9d5f9e64","excerpt":"动机 最近在准备面试的时候想重温一下 JS 的基础，也包括自己以前写下过的文字，原型链问题就成了一个不可忽视的题目了。然而在读自己之前写下来的(文章)/2018-12-17-2/时发现各个地方逻辑都不太流畅，故产生了重新写一篇的念头。 update…","html":"<h1>动机</h1>\n<p>最近在准备面试的时候想重温一下 JS 的基础，也包括自己以前写下过的文字，原型链问题就成了一个不可忽视的题目了。然而在读自己之前写下来的(文章)[/2018-12-17-2/]时发现各个地方逻辑都不太流畅，故产生了重新写一篇的念头。</p>\n<blockquote>\n<p>update: 本文已经被重构，重构前的版本（“重温继承”）带有部分技术性错误；同时新的版本对 prototype 的理解也有了一次提升。</p>\n</blockquote>\n<h1>prototype-based</h1>\n<p>我们可以先抛开 JS 来理解原型风格的 OO 编程。</p>\n<h2>OOP 里的继承</h2>\n<p>OO 编程的核心在于定义对象，而一个项目可能有万千中对象，每种都单独、完整地定义它的所有数据、行为显然是不能接受的。1962 年，名为 Simula 的语言带来了许多 OO 编程的重要概念，其中之一便是继承[1]。通过继承，对象之间可以共享数据、行为等定义，减少重复定义。</p>\n<p>Simula 是一门 class-based 的 OO 语言，通过在 class 关键词前写上你需要继承的 class 名的语法来实现继承[2]，继承关系在 class 声明阶段就已经确立。</p>\n<h2>我不同意.jpg</h2>\n<p>prototype-based 第一次出现在 1980 年代: Self 语言设计用于探索这种新的继承实现方式是否经得起推敲[3]。这个模式核心是每个对象都设置有“原型”，这个原型可以是任意的、别的对象。你只需要关心对象本身：只要它有你需要的东西，你就可以大喊“拿来吧你”然后把它设置成你的原型。这样你就拥有了它的特性，而不需要关心怎么建模。</p>\n<blockquote>\n<p>prototype-based 对 class-based 最大的优势在于它可以更简单修正建模失误：假设你在 class-based 系统起步阶段，错误给某个对象加入了一些不必要的能力，比如你声明所有车辆都可以运输货物；有一天，你的项目加了自行车这个类型以及运输集装箱的需求。显然，自行车也是车辆，它需要绝大部分车辆的功能，但却无法运输集装箱。你需要修复这个失误：你只能修正每一处发货的地方：你需要调用新加的卡车类型而不是原来的车辆类型，车辆有可能不能运输集装箱。而 prototype-based 在这种场景下，你只需要 clone 一份的原型并移除 or 修正相关字段即可。[4]</p>\n</blockquote>\n<h1>JS 的继承</h1>\n<p>JS 语言是一门“杂交”语言：它的父亲 Brendan Eich 最初的设想是把 Lisp 的一个变种 Scheme 语言带入浏览器，但他的上司希望这门用于浏览器的语言能长得像 Java，能进行 OO 编程。于是，JS 变成了一门拥有 Scheme 语言的功能（函数式编程能力）、拥有 Self 语言的 OO 能力（原型继承）、拥有类似 Java 语言的外观（API）的语言[5]。</p>\n<blockquote>\n<p>简单猜想猜想，拥有 Scheme 的内核但却杂交了 Self 的原型继承原因，极有可能是以 Scheme 做了一半后被要求带入 Java 类似的 OO 编程体验，这时候推倒做成 Java 的 class-base 估计时间来不及了，只能转向了对 functional 语言更友好 prototype-based 来做。就算是 Brendan Eich 也遭不住需求变更.jpg</p>\n</blockquote>\n<blockquote>\n<p>以上猜想无事实依据</p>\n</blockquote>\n<p>按照 prototype-based 来理解，JS 只需要原型即可完成所有想做的事情。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">juice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'juice'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> banana <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nbanana<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> fruit\n\nbanana<span class=\"token punctuation\">.</span><span class=\"token function\">juice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 'juice'</span></code></pre></div>\n<blockquote>\n<p>这里我们需要树立一个概念：<code class=\"language-text\">__proto__</code>就是一个约定的名字，js 规定了原型就放在这，引擎在遇到不认识的方法就往这上边找，找不到就继续找<code class=\"language-text\">__proto__.__proto__</code>直至找到或者溯源到 null。不需要考虑它一定是什么什么操作得到的东西。</p>\n</blockquote>\n<p>可是 JS 需要有 Java 类似的写法，于是构造函数出现了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bananaConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">juice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'juice'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> banana <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bananaConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbanana<span class=\"token punctuation\">.</span><span class=\"token function\">juice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 'juice'</span></code></pre></div>\n<p>显然这个做法是不行的：他需要继承；但 JS 的继承是 prototype-based 的，怎么在 function 里实现继承？这时候才是 prototype 的出场机会。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">juice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'juice'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bananaConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span>\n<span class=\"token punctuation\">}</span>\n\nbananaConstrctor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> fruit\n\n<span class=\"token keyword\">var</span> banana <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bananaConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbanana<span class=\"token punctuation\">.</span><span class=\"token function\">juice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 'juice'</span></code></pre></div>\n<p>我们规定，在 new 操作时，把函数的 prototype 属性赋值给 new 操作得到的实例的<code class=\"language-text\">__proto__</code>上，这样就可以在 prototype-based 上做一个类似 Java 的写法体验了：new 出来的实例会“继承”prototype 里的内容。</p>\n<p>当然了，以上的写法里 fruit 是一个实例，我们可以再 OO 一点：把 fruit 也做成 constrctor。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fruitConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">juice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'juice'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bananaConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span>\n<span class=\"token punctuation\">}</span>\n\nbananaConstrctor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fruitConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> banana <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bananaConstrctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbanana<span class=\"token punctuation\">.</span><span class=\"token function\">juice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 'juice'</span></code></pre></div>\n<blockquote>\n<p>吐槽一下阮一峰的文章[6]：“这不仅无法做到数据共享” 这句话把我绕在里边饶了好久好久: prototype 是为了共享数据而设置的。可 OO 编程得到的实例，哪来需求一定要设置个原型来共享数据？共享数据只是刚好一个设定：相比把 prototype 设置为另一个 constrctor，new 操作时迭代把原型上的 constrctor 都跑一次，创始人认为共享对象这个做法更快、更省内存了。</p>\n</blockquote>\n<h1>js 继承的八股文</h1>\n<p>因为 js 用 prototype-based 的方式兼容了 Java 的 new 写法，这给 js-er 写继承的时候带来了更多写法上的可操作空间：被继承的内容，是写在 this 上好，还是写在原型上好？还是都写？原型上写 new constrctor 得到的实例还是直接写一个对象？几番排列组合得到了各种骚操作：你知道 js 里继承有多少种写法？</p>\n<blockquote>\n<p>简直新时代的孔乙己</p>\n</blockquote>\n<blockquote>\n<p>本质上都是 copy 与不 copy 的区别而已</p>\n</blockquote>\n<h1>手动实现一个 new 操作</h1>\n<p>经典考题？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">customNew</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constructor<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 箭头函数的 prototype 没有constructor，对其new进行操作会跟操作不是function的对象行为一致</span>\n  <span class=\"token keyword\">const</span> realConstructor <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor\n\n  <span class=\"token comment\">// 规范要求的行为：constructor不是没有call内部方法就要抛错</span>\n  <span class=\"token comment\">// user script没法获取是否有这个行为，于是曲线救国，用typeof模拟这个行为，polyfill也是这个做法</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> realConstructor <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里文案可以找一下现代浏览器的行为，尽量靠近</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> that <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">realConstructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 规范要求行为：需要赋值一次constructor</span>\n  <span class=\"token comment\">// 但按照chrome的实际行为似乎不复制的：修改实例的 __proto__.constructor 会影响到实例的 constructor 取值结果</span>\n  that<span class=\"token punctuation\">.</span>realConstructor <span class=\"token operator\">=</span> realConstructor\n\n  that<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> realConstructor<span class=\"token punctuation\">.</span>prototype\n\n  <span class=\"token keyword\">return</span> that\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>原型继承和 class</h1>\n<p>在多年发展历程下来，原型继承已经日渐息微。相比之下，class-based 则在各种原因下，有大量的优秀语法、实践留下。最简单比如 public、private、protect 语义在目前的 js 原型继承里很难实现，人们宁愿顶着方法被修改、项目爆炸后再找原因、定规则（这就是为什么现代框架都不再动原生对象原型了：原生对象是公用的，一旦覆盖全都完蛋，还有可能会冲突）。class 的出现则带来一丝希望，为 Node.js 在服务器领域进一步发展提供了助力，理想情况下甚至可以做到当年没做到的事情：在 OOP 写法上，完全对标 Java 的功能、语法。这能让很多 Java 积累下来的财富更容易融合到 js 中，也有机会反哺 FE 领域的书写体验。</p>\n<p>所以拿着“class 不过是个语法糖”的说法而认为 class 没用的，我十分不认可。语法糖并不代表没有存在意义，它可以是新语法的铺路（比如最近争议巨大的 private field 提案，它也能被 transform 并 polyfill，但你会在原型写法下用这个功能？），也可以是书写风格的统一（class 语法下还有人关心继承的 x 种写法？）。不能简单人云亦云，一句语法糖了事。</p>\n<h1>参考来源</h1>\n<p>[1] <a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming#History\">Wikipedia: Object-oriented programming</a>\n[2] <a href=\"https://en.wikipedia.org/wiki/Simula#CITEREFDahlMyhrhaugNygaard1970\">Wikipedia: Simula</a>\n[3] <a href=\"https://en.wikipedia.org/wiki/Self_(programming_language)\">Wikipedia: Self</a>\n[4] <a href=\"https://en.wikipedia.org/wiki/Self_(programming_language)#Prototype-based_programming_languages\">Wikipedia: Self#Prototype-based<em>programming</em>languages</a>\n[5] <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich#Netscape_and_JavaScript\">Wikipedia: Brendan Eich</a>\n[6] <a href=\"https://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\">Javascript 继承机制的设计思想</a></p>","frontmatter":{"title":"JS里的继承","date":"August 29, 2021"}}},"pageContext":{"slug":"/2021-05-30/1/","previous":{"fields":{"slug":"/2021-05-08/1/"},"frontmatter":{"title":"如何是实现范围随机数取值"}},"next":null}},"staticQueryHashes":[]}