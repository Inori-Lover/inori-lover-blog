{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-12-28/","result":{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"f850c5a3-eafb-5f87-b52a-d10bbf3242c8","excerpt":"缘由 今天老大喊我把之前rn写的App优化一下……不同tab之间的的切换太卡了，给了一个思路是上一个，我这边的意思是让我先看一下代码，毕竟我还没写过rn…… 为何会有imm* immutable-js…","html":"<h1>缘由</h1>\n<p>今天老大喊我把之前rn写的App优化一下……不同tab之间的的切换太卡了，给了一个思路是上一个<code class=\"language-text\">immutable-js</code>，我这边的意思是让我先看一下代码，毕竟我还没写过rn……</p>\n<h1>为何会有imm*</h1>\n<p><a href=\"https://github.com/facebook/immutable-js\">immutable-js</a>，通过导出自定义数据结构构造器，构造得到的对象仅有的各个方法均为返回新对象的方法，不提供任何手段来直接修改对象内容。当然，为了避免<code class=\"language-text\">JSON.parse(JSON.stringify))</code>等deepClone手段的低效，<code class=\"language-text\">immutable-js</code>通过使用特定的数据结构来储存、修改、衍生常用结构，达到用最小消耗来隔离两个数据对象的目的。</p>\n<p><a href=\"https://github.com/mweststrate/immer\">immer</a>，与前者不同的是，immer并没有使用各种奇怪的奇怪的数据结构来优化数据对象的隔离消耗，而是使用高阶函数包裹修改操作，把传入对象包裹一层添加<code class=\"language-text\">get</code>|<code class=\"language-text\">set</code>来隔离修改操作对传入对象的影响，同时循环将原对象以及记录到的修改操作循环assign到<a href=\"https://github.com/mweststrate/immer/blob/master/src/common.js#L39\"><code class=\"language-text\">{}</code></a>上作为return值返回。</p>\n<blockquote>\n<p>vue的老铁肯定觉得很熟悉（</p>\n</blockquote>\n<p>介绍完最主流的两个不可变数据实现库后再回头看看当初fb员工提出<code class=\"language-text\">immutable-js</code>时提到的<strong>why</strong>。</p>\n<p>不可变数据带来两个最大的优势，\n第一个就是数据都是不可变后，修改操作不再会产生潜在的影响，修改操作进行时的心智负担变小了；\n第二个就是避免了<code class=\"language-text\">shadowDiff</code>, 有效解决了<code class=\"language-text\">PureComponent</code>的问题，为降低<code class=\"language-text\">shouldComponentUpdate</code>消耗提供了一条思路。（当然原介绍中用的不是<code class=\"language-text\">PureComponent</code>，当时还是ES5函数的时代，用的是<code class=\"language-text\">mixin</code>。<code class=\"language-text\">mixin</code>是直到ES6 Class声明写法流行后才被抛弃同时定性为有害，想想也是惨233</p>\n<h1>redux</h1>\n<p>要说<code class=\"language-text\">shouldComponentUpdate</code>肯定会联想到<code class=\"language-text\">react-redux</code>，他提供的高阶组件<code class=\"language-text\">connect</code>其中一个作用就是修改了组件的<code class=\"language-text\">shouldComponentUpdate</code>强制为浅对比，也就是所有组件都变成了<code class=\"language-text\">PureComponent</code>。同时也是基于这个原因，redux的各大教程最大的一条注意事项就是：修改state时需要返回一个全新对象，要<code class=\"language-text\">===</code>判断为假的那种全新，反则修改后有可能不会触发刷新。</p>\n<h1>redux + imm* ?</h1>\n<p>那么进入redux时代后，imm*类库的存在意义有何变化？回看前文提到的不可变数据结构，两大优势其中之一已经被redux无意间消去，只剩下减少心智负担这一条。但是认真一想：state修改极少会遇到引用类型数据，就算有，也是不会复用的那种、仅限自己层叠的数据结构，极少遇到不同state-key之间共享同一块数据的情况(或者根本没有？反正我没写过这么奇葩的state结构)。那么这个时候的心智负担会有多大？就算是以贴合原生API为卖点的<code class=\"language-text\">immer</code>也是以降低层叠结构修改繁复作为主要宣传场景，而当下大家也找到另一种绕开层叠数据的手段：不层叠就完事了。每一个model里边的数据都尽量做到完全扁平，这样借助es6解构语法返回新对象并不会比点操作符修改繁杂多少，甚至熟悉之后会觉得更加简单明了。</p>\n<h1>imm*类库可以降低性能消耗？</h1>\n<p>都是返回新对象……</p>\n<p>有人会反驳说<code class=\"language-text\">immutable-js</code>会复用数据结构……我只想说怎么复用也是要把修改的存上去，用完就丢的场景这个复用实在……</p>\n<h1>最后</h1>\n<p>一组代码作为体验pure与否的差距。令我比较惊讶的是函数组件……我原本以为函数组件是打死不刷新的，看来应该是只要触发了props变动就一定会rerend。</p>\n<p>代码使用tsx书写，因为染色问题个别地方写得比较别扭……</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> deep<span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ntype State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> deep<span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> pure<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> textFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">.</span>num <span class=\"token punctuation\">:</span> value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FuncComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span> <span class=\"token function\">textFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FuncComponent'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\ntype NormalComponentProps <span class=\"token operator\">=</span> Props <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>pure<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NormalComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token operator\">&lt;</span>NormalComponentProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">shouldComponentUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">:</span> NormalComponentProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span>pure <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">===</span> nextProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n    <span class=\"token keyword\">return</span> <span class=\"token function\">textFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NormalComponent'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n    <span class=\"token keyword\">return</span> <span class=\"token function\">textFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PureComponent'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n  readonly state<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      deep<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        num<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pure<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">clickHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> deep <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> num <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> deep\n    value<span class=\"token punctuation\">.</span>deep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      num<span class=\"token punctuation\">:</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">pureToggleHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pure <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      pure<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>pure<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> pure <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span> <span class=\"token function\">textFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state is'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clickHandle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>plus <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pureToggleHandle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>pure<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>FuncComponent value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>NormalComponent value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> pure<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pure<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>PureComponent value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>晚安，&#x26; 提前祝 新年好\n2018年12月29日00点54分</p>","frontmatter":{"title":"关于imm*类数据不可变库的一些想法","date":"December 28, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-12-28/","previous":{"fields":{"slug":"/2018-12-17-2/"},"frontmatter":{"title":"一些想补的基础：new机制，原型"}},"next":{"fields":{"slug":"/2019-01-02/"},"frontmatter":{"title":"2019年写的2018年终总结"}}}}}