{"data":{"site":{"siteMetadata":{"title":"乐园遗梦","author":"inori_lover"}},"markdownRemark":{"id":"bdf05cbe-cecb-59ba-aea6-4b3a859da22b","excerpt":"…","html":"<p>今天一天下来的总结就是：搬石头砸自己脚。</p>\n<p>关于重试这个需求其实一直都伴随着我的代码，但是以前都觉得麻烦一直选择性忽视。到了今天感觉不能继续躲了（主动 被动因素都有就是了），然后一天都坑在这上边了，完全不知道怎么着手进行。</p>\n<h3>迭代重试</h3>\n<p>最初想出来的重试流程是把自身的变量定义传到retry函数里作为一个参数；当条件不符合以及重试数不达标时，迭代调用传入的函数。这里涉及到一个问题就是返回流程，搞了一天我都没搞好迭代的返回应该怎么处理（回家走路时想了一下觉得有一套路子可行但是代码写出来并不优雅…而且也还是有点绕…）。</p>\n<h3>解耦重试流程</h3>\n<p>回家后洗澡继续想，慢慢地思维变得正常起来：既然之前的流程时迭代的，迭代对于自己来说有点绕，那能不能改成常规循环？怎么才能满足循环条件？</p>\n<p>要循环调用，就意味着，循环体与循环语句必须解耦，两者需要互不干扰。</p>\n<p>之前的写法是 函数运行->(inside)判断函数是否合规->不合规就调用函数本体 ,但是重试后合规的话，应该怎么返回，这里有点绕了- -（是的我知道我很菜</p>\n<p>现在要解耦，那就需要 生成值的函数 与 判断值的函数 必须分开，然后由重试函数包裹进行判断重试。理解这一层后重试函数就不难实现了。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n  <span class=\"token selector\">#count::after</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>0<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>count<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">maybe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isRight</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">></span> <span class=\"token number\">0.999999999999</span>\n\n  <span class=\"token keyword\">const</span> tryAble <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>maybe<span class=\"token punctuation\">,</span> isRight<span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> flag\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n      count <span class=\"token operator\">&lt;</span> times <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token operator\">!</span>flag\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> val\n\n      count<span class=\"token operator\">++</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        val <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">maybe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        flag <span class=\"token operator\">=</span> <span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n      <span class=\"token punctuation\">}</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'done at: '</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">tryAble</span><span class=\"token punctuation\">(</span>maybe<span class=\"token punctuation\">,</span> isRight<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>ps: 或许会更新注释以及添加砸自己脚的那个重试写法（的正确版本）。</p>\n<p>晚安各位</p>\n<p>2018年11月29日 22点23分</p>","frontmatter":{"title":"关于重试","date":"November 29, 2018"}}},"pageContext":{"slug":"/2018-11-29/","previous":{"fields":{"slug":"/2018-11-27/"},"frontmatter":{"title":"晚归，小程序，预告"}},"next":null}}